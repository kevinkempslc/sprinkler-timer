/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SprinklerService_H
#define SprinklerService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "SprinklerServer_types.h"

namespace SprinklerServerThrift {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SprinklerServiceIf {
 public:
  virtual ~SprinklerServiceIf() {}
  virtual bool runTimer() = 0;
  virtual bool shutdown() = 0;
  virtual bool checkSession(const bool startSession) = 0;
  virtual bool runProgram(const int32_t programNumber) = 0;
  virtual bool setProgramStartTime(const int32_t hours, const int32_t minutes) = 0;
  virtual void selectProgram(BulkData& _return) = 0;
  virtual void sendAll(BulkData& _return) = 0;
  virtual void sendUpdate(UpdateData& _return) = 0;
  virtual bool selectEvenMode() = 0;
  virtual bool selectOddMode() = 0;
  virtual bool selectDayMode() = 0;
  virtual bool setDays(const std::vector<Day::type> & days) = 0;
  virtual bool selectIntervalMode() = 0;
  virtual bool setInterval(const int64_t interval) = 0;
  virtual bool runZone(const int32_t zoneNumber) = 0;
  virtual bool setZones(const std::vector<int32_t> & zones) = 0;
  virtual bool setZoneName(const int32_t zoneNumber, const std::string& zoneName) = 0;
  virtual bool setZoneDuration(const int32_t zoneNumber, const int32_t duration) = 0;
};

class SprinklerServiceIfFactory {
 public:
  typedef SprinklerServiceIf Handler;

  virtual ~SprinklerServiceIfFactory() {}

  virtual SprinklerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SprinklerServiceIf* /* handler */) = 0;
};

class SprinklerServiceIfSingletonFactory : virtual public SprinklerServiceIfFactory {
 public:
  SprinklerServiceIfSingletonFactory(const boost::shared_ptr<SprinklerServiceIf>& iface) : iface_(iface) {}
  virtual ~SprinklerServiceIfSingletonFactory() {}

  virtual SprinklerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SprinklerServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<SprinklerServiceIf> iface_;
};

class SprinklerServiceNull : virtual public SprinklerServiceIf {
 public:
  virtual ~SprinklerServiceNull() {}
  bool runTimer() {
    bool _return = false;
    return _return;
  }
  bool shutdown() {
    bool _return = false;
    return _return;
  }
  bool checkSession(const bool /* startSession */) {
    bool _return = false;
    return _return;
  }
  bool runProgram(const int32_t /* programNumber */) {
    bool _return = false;
    return _return;
  }
  bool setProgramStartTime(const int32_t /* hours */, const int32_t /* minutes */) {
    bool _return = false;
    return _return;
  }
  void selectProgram(BulkData& /* _return */) {
    return;
  }
  void sendAll(BulkData& /* _return */) {
    return;
  }
  void sendUpdate(UpdateData& /* _return */) {
    return;
  }
  bool selectEvenMode() {
    bool _return = false;
    return _return;
  }
  bool selectOddMode() {
    bool _return = false;
    return _return;
  }
  bool selectDayMode() {
    bool _return = false;
    return _return;
  }
  bool setDays(const std::vector<Day::type> & /* days */) {
    bool _return = false;
    return _return;
  }
  bool selectIntervalMode() {
    bool _return = false;
    return _return;
  }
  bool setInterval(const int64_t /* interval */) {
    bool _return = false;
    return _return;
  }
  bool runZone(const int32_t /* zoneNumber */) {
    bool _return = false;
    return _return;
  }
  bool setZones(const std::vector<int32_t> & /* zones */) {
    bool _return = false;
    return _return;
  }
  bool setZoneName(const int32_t /* zoneNumber */, const std::string& /* zoneName */) {
    bool _return = false;
    return _return;
  }
  bool setZoneDuration(const int32_t /* zoneNumber */, const int32_t /* duration */) {
    bool _return = false;
    return _return;
  }
};


class SprinklerService_runTimer_args {
 public:

  SprinklerService_runTimer_args(const SprinklerService_runTimer_args&);
  SprinklerService_runTimer_args& operator=(const SprinklerService_runTimer_args&);
  SprinklerService_runTimer_args() {
  }

  virtual ~SprinklerService_runTimer_args() throw();

  bool operator == (const SprinklerService_runTimer_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SprinklerService_runTimer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_runTimer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SprinklerService_runTimer_pargs {
 public:


  virtual ~SprinklerService_runTimer_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_runTimer_result__isset {
  _SprinklerService_runTimer_result__isset() : success(false) {}
  bool success :1;
} _SprinklerService_runTimer_result__isset;

class SprinklerService_runTimer_result {
 public:

  SprinklerService_runTimer_result(const SprinklerService_runTimer_result&);
  SprinklerService_runTimer_result& operator=(const SprinklerService_runTimer_result&);
  SprinklerService_runTimer_result() : success(0) {
  }

  virtual ~SprinklerService_runTimer_result() throw();
  bool success;

  _SprinklerService_runTimer_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const SprinklerService_runTimer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SprinklerService_runTimer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_runTimer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_runTimer_presult__isset {
  _SprinklerService_runTimer_presult__isset() : success(false) {}
  bool success :1;
} _SprinklerService_runTimer_presult__isset;

class SprinklerService_runTimer_presult {
 public:


  virtual ~SprinklerService_runTimer_presult() throw();
  bool* success;

  _SprinklerService_runTimer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SprinklerService_shutdown_args {
 public:

  SprinklerService_shutdown_args(const SprinklerService_shutdown_args&);
  SprinklerService_shutdown_args& operator=(const SprinklerService_shutdown_args&);
  SprinklerService_shutdown_args() {
  }

  virtual ~SprinklerService_shutdown_args() throw();

  bool operator == (const SprinklerService_shutdown_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SprinklerService_shutdown_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_shutdown_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SprinklerService_shutdown_pargs {
 public:


  virtual ~SprinklerService_shutdown_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_shutdown_result__isset {
  _SprinklerService_shutdown_result__isset() : success(false) {}
  bool success :1;
} _SprinklerService_shutdown_result__isset;

class SprinklerService_shutdown_result {
 public:

  SprinklerService_shutdown_result(const SprinklerService_shutdown_result&);
  SprinklerService_shutdown_result& operator=(const SprinklerService_shutdown_result&);
  SprinklerService_shutdown_result() : success(0) {
  }

  virtual ~SprinklerService_shutdown_result() throw();
  bool success;

  _SprinklerService_shutdown_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const SprinklerService_shutdown_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SprinklerService_shutdown_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_shutdown_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_shutdown_presult__isset {
  _SprinklerService_shutdown_presult__isset() : success(false) {}
  bool success :1;
} _SprinklerService_shutdown_presult__isset;

class SprinklerService_shutdown_presult {
 public:


  virtual ~SprinklerService_shutdown_presult() throw();
  bool* success;

  _SprinklerService_shutdown_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SprinklerService_checkSession_args__isset {
  _SprinklerService_checkSession_args__isset() : startSession(false) {}
  bool startSession :1;
} _SprinklerService_checkSession_args__isset;

class SprinklerService_checkSession_args {
 public:

  SprinklerService_checkSession_args(const SprinklerService_checkSession_args&);
  SprinklerService_checkSession_args& operator=(const SprinklerService_checkSession_args&);
  SprinklerService_checkSession_args() : startSession(0) {
  }

  virtual ~SprinklerService_checkSession_args() throw();
  bool startSession;

  _SprinklerService_checkSession_args__isset __isset;

  void __set_startSession(const bool val);

  bool operator == (const SprinklerService_checkSession_args & rhs) const
  {
    if (!(startSession == rhs.startSession))
      return false;
    return true;
  }
  bool operator != (const SprinklerService_checkSession_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_checkSession_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SprinklerService_checkSession_pargs {
 public:


  virtual ~SprinklerService_checkSession_pargs() throw();
  const bool* startSession;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_checkSession_result__isset {
  _SprinklerService_checkSession_result__isset() : success(false) {}
  bool success :1;
} _SprinklerService_checkSession_result__isset;

class SprinklerService_checkSession_result {
 public:

  SprinklerService_checkSession_result(const SprinklerService_checkSession_result&);
  SprinklerService_checkSession_result& operator=(const SprinklerService_checkSession_result&);
  SprinklerService_checkSession_result() : success(0) {
  }

  virtual ~SprinklerService_checkSession_result() throw();
  bool success;

  _SprinklerService_checkSession_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const SprinklerService_checkSession_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SprinklerService_checkSession_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_checkSession_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_checkSession_presult__isset {
  _SprinklerService_checkSession_presult__isset() : success(false) {}
  bool success :1;
} _SprinklerService_checkSession_presult__isset;

class SprinklerService_checkSession_presult {
 public:


  virtual ~SprinklerService_checkSession_presult() throw();
  bool* success;

  _SprinklerService_checkSession_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SprinklerService_runProgram_args__isset {
  _SprinklerService_runProgram_args__isset() : programNumber(false) {}
  bool programNumber :1;
} _SprinklerService_runProgram_args__isset;

class SprinklerService_runProgram_args {
 public:

  SprinklerService_runProgram_args(const SprinklerService_runProgram_args&);
  SprinklerService_runProgram_args& operator=(const SprinklerService_runProgram_args&);
  SprinklerService_runProgram_args() : programNumber(0) {
  }

  virtual ~SprinklerService_runProgram_args() throw();
  int32_t programNumber;

  _SprinklerService_runProgram_args__isset __isset;

  void __set_programNumber(const int32_t val);

  bool operator == (const SprinklerService_runProgram_args & rhs) const
  {
    if (!(programNumber == rhs.programNumber))
      return false;
    return true;
  }
  bool operator != (const SprinklerService_runProgram_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_runProgram_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SprinklerService_runProgram_pargs {
 public:


  virtual ~SprinklerService_runProgram_pargs() throw();
  const int32_t* programNumber;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_runProgram_result__isset {
  _SprinklerService_runProgram_result__isset() : success(false) {}
  bool success :1;
} _SprinklerService_runProgram_result__isset;

class SprinklerService_runProgram_result {
 public:

  SprinklerService_runProgram_result(const SprinklerService_runProgram_result&);
  SprinklerService_runProgram_result& operator=(const SprinklerService_runProgram_result&);
  SprinklerService_runProgram_result() : success(0) {
  }

  virtual ~SprinklerService_runProgram_result() throw();
  bool success;

  _SprinklerService_runProgram_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const SprinklerService_runProgram_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SprinklerService_runProgram_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_runProgram_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_runProgram_presult__isset {
  _SprinklerService_runProgram_presult__isset() : success(false) {}
  bool success :1;
} _SprinklerService_runProgram_presult__isset;

class SprinklerService_runProgram_presult {
 public:


  virtual ~SprinklerService_runProgram_presult() throw();
  bool* success;

  _SprinklerService_runProgram_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SprinklerService_setProgramStartTime_args__isset {
  _SprinklerService_setProgramStartTime_args__isset() : hours(false), minutes(false) {}
  bool hours :1;
  bool minutes :1;
} _SprinklerService_setProgramStartTime_args__isset;

class SprinklerService_setProgramStartTime_args {
 public:

  SprinklerService_setProgramStartTime_args(const SprinklerService_setProgramStartTime_args&);
  SprinklerService_setProgramStartTime_args& operator=(const SprinklerService_setProgramStartTime_args&);
  SprinklerService_setProgramStartTime_args() : hours(0), minutes(0) {
  }

  virtual ~SprinklerService_setProgramStartTime_args() throw();
  int32_t hours;
  int32_t minutes;

  _SprinklerService_setProgramStartTime_args__isset __isset;

  void __set_hours(const int32_t val);

  void __set_minutes(const int32_t val);

  bool operator == (const SprinklerService_setProgramStartTime_args & rhs) const
  {
    if (!(hours == rhs.hours))
      return false;
    if (!(minutes == rhs.minutes))
      return false;
    return true;
  }
  bool operator != (const SprinklerService_setProgramStartTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_setProgramStartTime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SprinklerService_setProgramStartTime_pargs {
 public:


  virtual ~SprinklerService_setProgramStartTime_pargs() throw();
  const int32_t* hours;
  const int32_t* minutes;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_setProgramStartTime_result__isset {
  _SprinklerService_setProgramStartTime_result__isset() : success(false) {}
  bool success :1;
} _SprinklerService_setProgramStartTime_result__isset;

class SprinklerService_setProgramStartTime_result {
 public:

  SprinklerService_setProgramStartTime_result(const SprinklerService_setProgramStartTime_result&);
  SprinklerService_setProgramStartTime_result& operator=(const SprinklerService_setProgramStartTime_result&);
  SprinklerService_setProgramStartTime_result() : success(0) {
  }

  virtual ~SprinklerService_setProgramStartTime_result() throw();
  bool success;

  _SprinklerService_setProgramStartTime_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const SprinklerService_setProgramStartTime_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SprinklerService_setProgramStartTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_setProgramStartTime_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_setProgramStartTime_presult__isset {
  _SprinklerService_setProgramStartTime_presult__isset() : success(false) {}
  bool success :1;
} _SprinklerService_setProgramStartTime_presult__isset;

class SprinklerService_setProgramStartTime_presult {
 public:


  virtual ~SprinklerService_setProgramStartTime_presult() throw();
  bool* success;

  _SprinklerService_setProgramStartTime_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SprinklerService_selectProgram_args {
 public:

  SprinklerService_selectProgram_args(const SprinklerService_selectProgram_args&);
  SprinklerService_selectProgram_args& operator=(const SprinklerService_selectProgram_args&);
  SprinklerService_selectProgram_args() {
  }

  virtual ~SprinklerService_selectProgram_args() throw();

  bool operator == (const SprinklerService_selectProgram_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SprinklerService_selectProgram_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_selectProgram_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SprinklerService_selectProgram_pargs {
 public:


  virtual ~SprinklerService_selectProgram_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_selectProgram_result__isset {
  _SprinklerService_selectProgram_result__isset() : success(false) {}
  bool success :1;
} _SprinklerService_selectProgram_result__isset;

class SprinklerService_selectProgram_result {
 public:

  SprinklerService_selectProgram_result(const SprinklerService_selectProgram_result&);
  SprinklerService_selectProgram_result& operator=(const SprinklerService_selectProgram_result&);
  SprinklerService_selectProgram_result() {
  }

  virtual ~SprinklerService_selectProgram_result() throw();
  BulkData success;

  _SprinklerService_selectProgram_result__isset __isset;

  void __set_success(const BulkData& val);

  bool operator == (const SprinklerService_selectProgram_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SprinklerService_selectProgram_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_selectProgram_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_selectProgram_presult__isset {
  _SprinklerService_selectProgram_presult__isset() : success(false) {}
  bool success :1;
} _SprinklerService_selectProgram_presult__isset;

class SprinklerService_selectProgram_presult {
 public:


  virtual ~SprinklerService_selectProgram_presult() throw();
  BulkData* success;

  _SprinklerService_selectProgram_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SprinklerService_sendAll_args {
 public:

  SprinklerService_sendAll_args(const SprinklerService_sendAll_args&);
  SprinklerService_sendAll_args& operator=(const SprinklerService_sendAll_args&);
  SprinklerService_sendAll_args() {
  }

  virtual ~SprinklerService_sendAll_args() throw();

  bool operator == (const SprinklerService_sendAll_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SprinklerService_sendAll_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_sendAll_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SprinklerService_sendAll_pargs {
 public:


  virtual ~SprinklerService_sendAll_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_sendAll_result__isset {
  _SprinklerService_sendAll_result__isset() : success(false) {}
  bool success :1;
} _SprinklerService_sendAll_result__isset;

class SprinklerService_sendAll_result {
 public:

  SprinklerService_sendAll_result(const SprinklerService_sendAll_result&);
  SprinklerService_sendAll_result& operator=(const SprinklerService_sendAll_result&);
  SprinklerService_sendAll_result() {
  }

  virtual ~SprinklerService_sendAll_result() throw();
  BulkData success;

  _SprinklerService_sendAll_result__isset __isset;

  void __set_success(const BulkData& val);

  bool operator == (const SprinklerService_sendAll_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SprinklerService_sendAll_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_sendAll_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_sendAll_presult__isset {
  _SprinklerService_sendAll_presult__isset() : success(false) {}
  bool success :1;
} _SprinklerService_sendAll_presult__isset;

class SprinklerService_sendAll_presult {
 public:


  virtual ~SprinklerService_sendAll_presult() throw();
  BulkData* success;

  _SprinklerService_sendAll_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SprinklerService_sendUpdate_args {
 public:

  SprinklerService_sendUpdate_args(const SprinklerService_sendUpdate_args&);
  SprinklerService_sendUpdate_args& operator=(const SprinklerService_sendUpdate_args&);
  SprinklerService_sendUpdate_args() {
  }

  virtual ~SprinklerService_sendUpdate_args() throw();

  bool operator == (const SprinklerService_sendUpdate_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SprinklerService_sendUpdate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_sendUpdate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SprinklerService_sendUpdate_pargs {
 public:


  virtual ~SprinklerService_sendUpdate_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_sendUpdate_result__isset {
  _SprinklerService_sendUpdate_result__isset() : success(false) {}
  bool success :1;
} _SprinklerService_sendUpdate_result__isset;

class SprinklerService_sendUpdate_result {
 public:

  SprinklerService_sendUpdate_result(const SprinklerService_sendUpdate_result&);
  SprinklerService_sendUpdate_result& operator=(const SprinklerService_sendUpdate_result&);
  SprinklerService_sendUpdate_result() {
  }

  virtual ~SprinklerService_sendUpdate_result() throw();
  UpdateData success;

  _SprinklerService_sendUpdate_result__isset __isset;

  void __set_success(const UpdateData& val);

  bool operator == (const SprinklerService_sendUpdate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SprinklerService_sendUpdate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_sendUpdate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_sendUpdate_presult__isset {
  _SprinklerService_sendUpdate_presult__isset() : success(false) {}
  bool success :1;
} _SprinklerService_sendUpdate_presult__isset;

class SprinklerService_sendUpdate_presult {
 public:


  virtual ~SprinklerService_sendUpdate_presult() throw();
  UpdateData* success;

  _SprinklerService_sendUpdate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SprinklerService_selectEvenMode_args {
 public:

  SprinklerService_selectEvenMode_args(const SprinklerService_selectEvenMode_args&);
  SprinklerService_selectEvenMode_args& operator=(const SprinklerService_selectEvenMode_args&);
  SprinklerService_selectEvenMode_args() {
  }

  virtual ~SprinklerService_selectEvenMode_args() throw();

  bool operator == (const SprinklerService_selectEvenMode_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SprinklerService_selectEvenMode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_selectEvenMode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SprinklerService_selectEvenMode_pargs {
 public:


  virtual ~SprinklerService_selectEvenMode_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_selectEvenMode_result__isset {
  _SprinklerService_selectEvenMode_result__isset() : success(false) {}
  bool success :1;
} _SprinklerService_selectEvenMode_result__isset;

class SprinklerService_selectEvenMode_result {
 public:

  SprinklerService_selectEvenMode_result(const SprinklerService_selectEvenMode_result&);
  SprinklerService_selectEvenMode_result& operator=(const SprinklerService_selectEvenMode_result&);
  SprinklerService_selectEvenMode_result() : success(0) {
  }

  virtual ~SprinklerService_selectEvenMode_result() throw();
  bool success;

  _SprinklerService_selectEvenMode_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const SprinklerService_selectEvenMode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SprinklerService_selectEvenMode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_selectEvenMode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_selectEvenMode_presult__isset {
  _SprinklerService_selectEvenMode_presult__isset() : success(false) {}
  bool success :1;
} _SprinklerService_selectEvenMode_presult__isset;

class SprinklerService_selectEvenMode_presult {
 public:


  virtual ~SprinklerService_selectEvenMode_presult() throw();
  bool* success;

  _SprinklerService_selectEvenMode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SprinklerService_selectOddMode_args {
 public:

  SprinklerService_selectOddMode_args(const SprinklerService_selectOddMode_args&);
  SprinklerService_selectOddMode_args& operator=(const SprinklerService_selectOddMode_args&);
  SprinklerService_selectOddMode_args() {
  }

  virtual ~SprinklerService_selectOddMode_args() throw();

  bool operator == (const SprinklerService_selectOddMode_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SprinklerService_selectOddMode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_selectOddMode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SprinklerService_selectOddMode_pargs {
 public:


  virtual ~SprinklerService_selectOddMode_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_selectOddMode_result__isset {
  _SprinklerService_selectOddMode_result__isset() : success(false) {}
  bool success :1;
} _SprinklerService_selectOddMode_result__isset;

class SprinklerService_selectOddMode_result {
 public:

  SprinklerService_selectOddMode_result(const SprinklerService_selectOddMode_result&);
  SprinklerService_selectOddMode_result& operator=(const SprinklerService_selectOddMode_result&);
  SprinklerService_selectOddMode_result() : success(0) {
  }

  virtual ~SprinklerService_selectOddMode_result() throw();
  bool success;

  _SprinklerService_selectOddMode_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const SprinklerService_selectOddMode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SprinklerService_selectOddMode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_selectOddMode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_selectOddMode_presult__isset {
  _SprinklerService_selectOddMode_presult__isset() : success(false) {}
  bool success :1;
} _SprinklerService_selectOddMode_presult__isset;

class SprinklerService_selectOddMode_presult {
 public:


  virtual ~SprinklerService_selectOddMode_presult() throw();
  bool* success;

  _SprinklerService_selectOddMode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SprinklerService_selectDayMode_args {
 public:

  SprinklerService_selectDayMode_args(const SprinklerService_selectDayMode_args&);
  SprinklerService_selectDayMode_args& operator=(const SprinklerService_selectDayMode_args&);
  SprinklerService_selectDayMode_args() {
  }

  virtual ~SprinklerService_selectDayMode_args() throw();

  bool operator == (const SprinklerService_selectDayMode_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SprinklerService_selectDayMode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_selectDayMode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SprinklerService_selectDayMode_pargs {
 public:


  virtual ~SprinklerService_selectDayMode_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_selectDayMode_result__isset {
  _SprinklerService_selectDayMode_result__isset() : success(false) {}
  bool success :1;
} _SprinklerService_selectDayMode_result__isset;

class SprinklerService_selectDayMode_result {
 public:

  SprinklerService_selectDayMode_result(const SprinklerService_selectDayMode_result&);
  SprinklerService_selectDayMode_result& operator=(const SprinklerService_selectDayMode_result&);
  SprinklerService_selectDayMode_result() : success(0) {
  }

  virtual ~SprinklerService_selectDayMode_result() throw();
  bool success;

  _SprinklerService_selectDayMode_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const SprinklerService_selectDayMode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SprinklerService_selectDayMode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_selectDayMode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_selectDayMode_presult__isset {
  _SprinklerService_selectDayMode_presult__isset() : success(false) {}
  bool success :1;
} _SprinklerService_selectDayMode_presult__isset;

class SprinklerService_selectDayMode_presult {
 public:


  virtual ~SprinklerService_selectDayMode_presult() throw();
  bool* success;

  _SprinklerService_selectDayMode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SprinklerService_setDays_args__isset {
  _SprinklerService_setDays_args__isset() : days(false) {}
  bool days :1;
} _SprinklerService_setDays_args__isset;

class SprinklerService_setDays_args {
 public:

  SprinklerService_setDays_args(const SprinklerService_setDays_args&);
  SprinklerService_setDays_args& operator=(const SprinklerService_setDays_args&);
  SprinklerService_setDays_args() {
  }

  virtual ~SprinklerService_setDays_args() throw();
  std::vector<Day::type>  days;

  _SprinklerService_setDays_args__isset __isset;

  void __set_days(const std::vector<Day::type> & val);

  bool operator == (const SprinklerService_setDays_args & rhs) const
  {
    if (!(days == rhs.days))
      return false;
    return true;
  }
  bool operator != (const SprinklerService_setDays_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_setDays_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SprinklerService_setDays_pargs {
 public:


  virtual ~SprinklerService_setDays_pargs() throw();
  const std::vector<Day::type> * days;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_setDays_result__isset {
  _SprinklerService_setDays_result__isset() : success(false) {}
  bool success :1;
} _SprinklerService_setDays_result__isset;

class SprinklerService_setDays_result {
 public:

  SprinklerService_setDays_result(const SprinklerService_setDays_result&);
  SprinklerService_setDays_result& operator=(const SprinklerService_setDays_result&);
  SprinklerService_setDays_result() : success(0) {
  }

  virtual ~SprinklerService_setDays_result() throw();
  bool success;

  _SprinklerService_setDays_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const SprinklerService_setDays_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SprinklerService_setDays_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_setDays_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_setDays_presult__isset {
  _SprinklerService_setDays_presult__isset() : success(false) {}
  bool success :1;
} _SprinklerService_setDays_presult__isset;

class SprinklerService_setDays_presult {
 public:


  virtual ~SprinklerService_setDays_presult() throw();
  bool* success;

  _SprinklerService_setDays_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SprinklerService_selectIntervalMode_args {
 public:

  SprinklerService_selectIntervalMode_args(const SprinklerService_selectIntervalMode_args&);
  SprinklerService_selectIntervalMode_args& operator=(const SprinklerService_selectIntervalMode_args&);
  SprinklerService_selectIntervalMode_args() {
  }

  virtual ~SprinklerService_selectIntervalMode_args() throw();

  bool operator == (const SprinklerService_selectIntervalMode_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SprinklerService_selectIntervalMode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_selectIntervalMode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SprinklerService_selectIntervalMode_pargs {
 public:


  virtual ~SprinklerService_selectIntervalMode_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_selectIntervalMode_result__isset {
  _SprinklerService_selectIntervalMode_result__isset() : success(false) {}
  bool success :1;
} _SprinklerService_selectIntervalMode_result__isset;

class SprinklerService_selectIntervalMode_result {
 public:

  SprinklerService_selectIntervalMode_result(const SprinklerService_selectIntervalMode_result&);
  SprinklerService_selectIntervalMode_result& operator=(const SprinklerService_selectIntervalMode_result&);
  SprinklerService_selectIntervalMode_result() : success(0) {
  }

  virtual ~SprinklerService_selectIntervalMode_result() throw();
  bool success;

  _SprinklerService_selectIntervalMode_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const SprinklerService_selectIntervalMode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SprinklerService_selectIntervalMode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_selectIntervalMode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_selectIntervalMode_presult__isset {
  _SprinklerService_selectIntervalMode_presult__isset() : success(false) {}
  bool success :1;
} _SprinklerService_selectIntervalMode_presult__isset;

class SprinklerService_selectIntervalMode_presult {
 public:


  virtual ~SprinklerService_selectIntervalMode_presult() throw();
  bool* success;

  _SprinklerService_selectIntervalMode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SprinklerService_setInterval_args__isset {
  _SprinklerService_setInterval_args__isset() : interval(false) {}
  bool interval :1;
} _SprinklerService_setInterval_args__isset;

class SprinklerService_setInterval_args {
 public:

  SprinklerService_setInterval_args(const SprinklerService_setInterval_args&);
  SprinklerService_setInterval_args& operator=(const SprinklerService_setInterval_args&);
  SprinklerService_setInterval_args() : interval(0) {
  }

  virtual ~SprinklerService_setInterval_args() throw();
  int64_t interval;

  _SprinklerService_setInterval_args__isset __isset;

  void __set_interval(const int64_t val);

  bool operator == (const SprinklerService_setInterval_args & rhs) const
  {
    if (!(interval == rhs.interval))
      return false;
    return true;
  }
  bool operator != (const SprinklerService_setInterval_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_setInterval_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SprinklerService_setInterval_pargs {
 public:


  virtual ~SprinklerService_setInterval_pargs() throw();
  const int64_t* interval;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_setInterval_result__isset {
  _SprinklerService_setInterval_result__isset() : success(false) {}
  bool success :1;
} _SprinklerService_setInterval_result__isset;

class SprinklerService_setInterval_result {
 public:

  SprinklerService_setInterval_result(const SprinklerService_setInterval_result&);
  SprinklerService_setInterval_result& operator=(const SprinklerService_setInterval_result&);
  SprinklerService_setInterval_result() : success(0) {
  }

  virtual ~SprinklerService_setInterval_result() throw();
  bool success;

  _SprinklerService_setInterval_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const SprinklerService_setInterval_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SprinklerService_setInterval_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_setInterval_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_setInterval_presult__isset {
  _SprinklerService_setInterval_presult__isset() : success(false) {}
  bool success :1;
} _SprinklerService_setInterval_presult__isset;

class SprinklerService_setInterval_presult {
 public:


  virtual ~SprinklerService_setInterval_presult() throw();
  bool* success;

  _SprinklerService_setInterval_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SprinklerService_runZone_args__isset {
  _SprinklerService_runZone_args__isset() : zoneNumber(false) {}
  bool zoneNumber :1;
} _SprinklerService_runZone_args__isset;

class SprinklerService_runZone_args {
 public:

  SprinklerService_runZone_args(const SprinklerService_runZone_args&);
  SprinklerService_runZone_args& operator=(const SprinklerService_runZone_args&);
  SprinklerService_runZone_args() : zoneNumber(0) {
  }

  virtual ~SprinklerService_runZone_args() throw();
  int32_t zoneNumber;

  _SprinklerService_runZone_args__isset __isset;

  void __set_zoneNumber(const int32_t val);

  bool operator == (const SprinklerService_runZone_args & rhs) const
  {
    if (!(zoneNumber == rhs.zoneNumber))
      return false;
    return true;
  }
  bool operator != (const SprinklerService_runZone_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_runZone_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SprinklerService_runZone_pargs {
 public:


  virtual ~SprinklerService_runZone_pargs() throw();
  const int32_t* zoneNumber;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_runZone_result__isset {
  _SprinklerService_runZone_result__isset() : success(false) {}
  bool success :1;
} _SprinklerService_runZone_result__isset;

class SprinklerService_runZone_result {
 public:

  SprinklerService_runZone_result(const SprinklerService_runZone_result&);
  SprinklerService_runZone_result& operator=(const SprinklerService_runZone_result&);
  SprinklerService_runZone_result() : success(0) {
  }

  virtual ~SprinklerService_runZone_result() throw();
  bool success;

  _SprinklerService_runZone_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const SprinklerService_runZone_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SprinklerService_runZone_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_runZone_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_runZone_presult__isset {
  _SprinklerService_runZone_presult__isset() : success(false) {}
  bool success :1;
} _SprinklerService_runZone_presult__isset;

class SprinklerService_runZone_presult {
 public:


  virtual ~SprinklerService_runZone_presult() throw();
  bool* success;

  _SprinklerService_runZone_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SprinklerService_setZones_args__isset {
  _SprinklerService_setZones_args__isset() : zones(false) {}
  bool zones :1;
} _SprinklerService_setZones_args__isset;

class SprinklerService_setZones_args {
 public:

  SprinklerService_setZones_args(const SprinklerService_setZones_args&);
  SprinklerService_setZones_args& operator=(const SprinklerService_setZones_args&);
  SprinklerService_setZones_args() {
  }

  virtual ~SprinklerService_setZones_args() throw();
  std::vector<int32_t>  zones;

  _SprinklerService_setZones_args__isset __isset;

  void __set_zones(const std::vector<int32_t> & val);

  bool operator == (const SprinklerService_setZones_args & rhs) const
  {
    if (!(zones == rhs.zones))
      return false;
    return true;
  }
  bool operator != (const SprinklerService_setZones_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_setZones_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SprinklerService_setZones_pargs {
 public:


  virtual ~SprinklerService_setZones_pargs() throw();
  const std::vector<int32_t> * zones;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_setZones_result__isset {
  _SprinklerService_setZones_result__isset() : success(false) {}
  bool success :1;
} _SprinklerService_setZones_result__isset;

class SprinklerService_setZones_result {
 public:

  SprinklerService_setZones_result(const SprinklerService_setZones_result&);
  SprinklerService_setZones_result& operator=(const SprinklerService_setZones_result&);
  SprinklerService_setZones_result() : success(0) {
  }

  virtual ~SprinklerService_setZones_result() throw();
  bool success;

  _SprinklerService_setZones_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const SprinklerService_setZones_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SprinklerService_setZones_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_setZones_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_setZones_presult__isset {
  _SprinklerService_setZones_presult__isset() : success(false) {}
  bool success :1;
} _SprinklerService_setZones_presult__isset;

class SprinklerService_setZones_presult {
 public:


  virtual ~SprinklerService_setZones_presult() throw();
  bool* success;

  _SprinklerService_setZones_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SprinklerService_setZoneName_args__isset {
  _SprinklerService_setZoneName_args__isset() : zoneNumber(false), zoneName(false) {}
  bool zoneNumber :1;
  bool zoneName :1;
} _SprinklerService_setZoneName_args__isset;

class SprinklerService_setZoneName_args {
 public:

  SprinklerService_setZoneName_args(const SprinklerService_setZoneName_args&);
  SprinklerService_setZoneName_args& operator=(const SprinklerService_setZoneName_args&);
  SprinklerService_setZoneName_args() : zoneNumber(0), zoneName() {
  }

  virtual ~SprinklerService_setZoneName_args() throw();
  int32_t zoneNumber;
  std::string zoneName;

  _SprinklerService_setZoneName_args__isset __isset;

  void __set_zoneNumber(const int32_t val);

  void __set_zoneName(const std::string& val);

  bool operator == (const SprinklerService_setZoneName_args & rhs) const
  {
    if (!(zoneNumber == rhs.zoneNumber))
      return false;
    if (!(zoneName == rhs.zoneName))
      return false;
    return true;
  }
  bool operator != (const SprinklerService_setZoneName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_setZoneName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SprinklerService_setZoneName_pargs {
 public:


  virtual ~SprinklerService_setZoneName_pargs() throw();
  const int32_t* zoneNumber;
  const std::string* zoneName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_setZoneName_result__isset {
  _SprinklerService_setZoneName_result__isset() : success(false) {}
  bool success :1;
} _SprinklerService_setZoneName_result__isset;

class SprinklerService_setZoneName_result {
 public:

  SprinklerService_setZoneName_result(const SprinklerService_setZoneName_result&);
  SprinklerService_setZoneName_result& operator=(const SprinklerService_setZoneName_result&);
  SprinklerService_setZoneName_result() : success(0) {
  }

  virtual ~SprinklerService_setZoneName_result() throw();
  bool success;

  _SprinklerService_setZoneName_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const SprinklerService_setZoneName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SprinklerService_setZoneName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_setZoneName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_setZoneName_presult__isset {
  _SprinklerService_setZoneName_presult__isset() : success(false) {}
  bool success :1;
} _SprinklerService_setZoneName_presult__isset;

class SprinklerService_setZoneName_presult {
 public:


  virtual ~SprinklerService_setZoneName_presult() throw();
  bool* success;

  _SprinklerService_setZoneName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SprinklerService_setZoneDuration_args__isset {
  _SprinklerService_setZoneDuration_args__isset() : zoneNumber(false), duration(false) {}
  bool zoneNumber :1;
  bool duration :1;
} _SprinklerService_setZoneDuration_args__isset;

class SprinklerService_setZoneDuration_args {
 public:

  SprinklerService_setZoneDuration_args(const SprinklerService_setZoneDuration_args&);
  SprinklerService_setZoneDuration_args& operator=(const SprinklerService_setZoneDuration_args&);
  SprinklerService_setZoneDuration_args() : zoneNumber(0), duration(0) {
  }

  virtual ~SprinklerService_setZoneDuration_args() throw();
  int32_t zoneNumber;
  int32_t duration;

  _SprinklerService_setZoneDuration_args__isset __isset;

  void __set_zoneNumber(const int32_t val);

  void __set_duration(const int32_t val);

  bool operator == (const SprinklerService_setZoneDuration_args & rhs) const
  {
    if (!(zoneNumber == rhs.zoneNumber))
      return false;
    if (!(duration == rhs.duration))
      return false;
    return true;
  }
  bool operator != (const SprinklerService_setZoneDuration_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_setZoneDuration_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SprinklerService_setZoneDuration_pargs {
 public:


  virtual ~SprinklerService_setZoneDuration_pargs() throw();
  const int32_t* zoneNumber;
  const int32_t* duration;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_setZoneDuration_result__isset {
  _SprinklerService_setZoneDuration_result__isset() : success(false) {}
  bool success :1;
} _SprinklerService_setZoneDuration_result__isset;

class SprinklerService_setZoneDuration_result {
 public:

  SprinklerService_setZoneDuration_result(const SprinklerService_setZoneDuration_result&);
  SprinklerService_setZoneDuration_result& operator=(const SprinklerService_setZoneDuration_result&);
  SprinklerService_setZoneDuration_result() : success(0) {
  }

  virtual ~SprinklerService_setZoneDuration_result() throw();
  bool success;

  _SprinklerService_setZoneDuration_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const SprinklerService_setZoneDuration_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SprinklerService_setZoneDuration_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SprinklerService_setZoneDuration_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SprinklerService_setZoneDuration_presult__isset {
  _SprinklerService_setZoneDuration_presult__isset() : success(false) {}
  bool success :1;
} _SprinklerService_setZoneDuration_presult__isset;

class SprinklerService_setZoneDuration_presult {
 public:


  virtual ~SprinklerService_setZoneDuration_presult() throw();
  bool* success;

  _SprinklerService_setZoneDuration_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SprinklerServiceClient : virtual public SprinklerServiceIf {
 public:
  SprinklerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SprinklerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool runTimer();
  void send_runTimer();
  bool recv_runTimer();
  bool shutdown();
  void send_shutdown();
  bool recv_shutdown();
  bool checkSession(const bool startSession);
  void send_checkSession(const bool startSession);
  bool recv_checkSession();
  bool runProgram(const int32_t programNumber);
  void send_runProgram(const int32_t programNumber);
  bool recv_runProgram();
  bool setProgramStartTime(const int32_t hours, const int32_t minutes);
  void send_setProgramStartTime(const int32_t hours, const int32_t minutes);
  bool recv_setProgramStartTime();
  void selectProgram(BulkData& _return);
  void send_selectProgram();
  void recv_selectProgram(BulkData& _return);
  void sendAll(BulkData& _return);
  void send_sendAll();
  void recv_sendAll(BulkData& _return);
  void sendUpdate(UpdateData& _return);
  void send_sendUpdate();
  void recv_sendUpdate(UpdateData& _return);
  bool selectEvenMode();
  void send_selectEvenMode();
  bool recv_selectEvenMode();
  bool selectOddMode();
  void send_selectOddMode();
  bool recv_selectOddMode();
  bool selectDayMode();
  void send_selectDayMode();
  bool recv_selectDayMode();
  bool setDays(const std::vector<Day::type> & days);
  void send_setDays(const std::vector<Day::type> & days);
  bool recv_setDays();
  bool selectIntervalMode();
  void send_selectIntervalMode();
  bool recv_selectIntervalMode();
  bool setInterval(const int64_t interval);
  void send_setInterval(const int64_t interval);
  bool recv_setInterval();
  bool runZone(const int32_t zoneNumber);
  void send_runZone(const int32_t zoneNumber);
  bool recv_runZone();
  bool setZones(const std::vector<int32_t> & zones);
  void send_setZones(const std::vector<int32_t> & zones);
  bool recv_setZones();
  bool setZoneName(const int32_t zoneNumber, const std::string& zoneName);
  void send_setZoneName(const int32_t zoneNumber, const std::string& zoneName);
  bool recv_setZoneName();
  bool setZoneDuration(const int32_t zoneNumber, const int32_t duration);
  void send_setZoneDuration(const int32_t zoneNumber, const int32_t duration);
  bool recv_setZoneDuration();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SprinklerServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SprinklerServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SprinklerServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_runTimer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shutdown(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_checkSession(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_runProgram(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setProgramStartTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_selectProgram(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendAll(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendUpdate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_selectEvenMode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_selectOddMode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_selectDayMode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setDays(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_selectIntervalMode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setInterval(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_runZone(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setZones(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setZoneName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setZoneDuration(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SprinklerServiceProcessor(boost::shared_ptr<SprinklerServiceIf> iface) :
    iface_(iface) {
    processMap_["runTimer"] = &SprinklerServiceProcessor::process_runTimer;
    processMap_["shutdown"] = &SprinklerServiceProcessor::process_shutdown;
    processMap_["checkSession"] = &SprinklerServiceProcessor::process_checkSession;
    processMap_["runProgram"] = &SprinklerServiceProcessor::process_runProgram;
    processMap_["setProgramStartTime"] = &SprinklerServiceProcessor::process_setProgramStartTime;
    processMap_["selectProgram"] = &SprinklerServiceProcessor::process_selectProgram;
    processMap_["sendAll"] = &SprinklerServiceProcessor::process_sendAll;
    processMap_["sendUpdate"] = &SprinklerServiceProcessor::process_sendUpdate;
    processMap_["selectEvenMode"] = &SprinklerServiceProcessor::process_selectEvenMode;
    processMap_["selectOddMode"] = &SprinklerServiceProcessor::process_selectOddMode;
    processMap_["selectDayMode"] = &SprinklerServiceProcessor::process_selectDayMode;
    processMap_["setDays"] = &SprinklerServiceProcessor::process_setDays;
    processMap_["selectIntervalMode"] = &SprinklerServiceProcessor::process_selectIntervalMode;
    processMap_["setInterval"] = &SprinklerServiceProcessor::process_setInterval;
    processMap_["runZone"] = &SprinklerServiceProcessor::process_runZone;
    processMap_["setZones"] = &SprinklerServiceProcessor::process_setZones;
    processMap_["setZoneName"] = &SprinklerServiceProcessor::process_setZoneName;
    processMap_["setZoneDuration"] = &SprinklerServiceProcessor::process_setZoneDuration;
  }

  virtual ~SprinklerServiceProcessor() {}
};

class SprinklerServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SprinklerServiceProcessorFactory(const ::boost::shared_ptr< SprinklerServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SprinklerServiceIfFactory > handlerFactory_;
};

class SprinklerServiceMultiface : virtual public SprinklerServiceIf {
 public:
  SprinklerServiceMultiface(std::vector<boost::shared_ptr<SprinklerServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SprinklerServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SprinklerServiceIf> > ifaces_;
  SprinklerServiceMultiface() {}
  void add(boost::shared_ptr<SprinklerServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool runTimer() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->runTimer();
    }
    return ifaces_[i]->runTimer();
  }

  bool shutdown() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->shutdown();
    }
    return ifaces_[i]->shutdown();
  }

  bool checkSession(const bool startSession) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->checkSession(startSession);
    }
    return ifaces_[i]->checkSession(startSession);
  }

  bool runProgram(const int32_t programNumber) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->runProgram(programNumber);
    }
    return ifaces_[i]->runProgram(programNumber);
  }

  bool setProgramStartTime(const int32_t hours, const int32_t minutes) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setProgramStartTime(hours, minutes);
    }
    return ifaces_[i]->setProgramStartTime(hours, minutes);
  }

  void selectProgram(BulkData& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->selectProgram(_return);
    }
    ifaces_[i]->selectProgram(_return);
    return;
  }

  void sendAll(BulkData& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendAll(_return);
    }
    ifaces_[i]->sendAll(_return);
    return;
  }

  void sendUpdate(UpdateData& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendUpdate(_return);
    }
    ifaces_[i]->sendUpdate(_return);
    return;
  }

  bool selectEvenMode() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->selectEvenMode();
    }
    return ifaces_[i]->selectEvenMode();
  }

  bool selectOddMode() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->selectOddMode();
    }
    return ifaces_[i]->selectOddMode();
  }

  bool selectDayMode() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->selectDayMode();
    }
    return ifaces_[i]->selectDayMode();
  }

  bool setDays(const std::vector<Day::type> & days) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setDays(days);
    }
    return ifaces_[i]->setDays(days);
  }

  bool selectIntervalMode() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->selectIntervalMode();
    }
    return ifaces_[i]->selectIntervalMode();
  }

  bool setInterval(const int64_t interval) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setInterval(interval);
    }
    return ifaces_[i]->setInterval(interval);
  }

  bool runZone(const int32_t zoneNumber) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->runZone(zoneNumber);
    }
    return ifaces_[i]->runZone(zoneNumber);
  }

  bool setZones(const std::vector<int32_t> & zones) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setZones(zones);
    }
    return ifaces_[i]->setZones(zones);
  }

  bool setZoneName(const int32_t zoneNumber, const std::string& zoneName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setZoneName(zoneNumber, zoneName);
    }
    return ifaces_[i]->setZoneName(zoneNumber, zoneName);
  }

  bool setZoneDuration(const int32_t zoneNumber, const int32_t duration) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setZoneDuration(zoneNumber, duration);
    }
    return ifaces_[i]->setZoneDuration(zoneNumber, duration);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class SprinklerServiceConcurrentClient : virtual public SprinklerServiceIf {
 public:
  SprinklerServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SprinklerServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool runTimer();
  int32_t send_runTimer();
  bool recv_runTimer(const int32_t seqid);
  bool shutdown();
  int32_t send_shutdown();
  bool recv_shutdown(const int32_t seqid);
  bool checkSession(const bool startSession);
  int32_t send_checkSession(const bool startSession);
  bool recv_checkSession(const int32_t seqid);
  bool runProgram(const int32_t programNumber);
  int32_t send_runProgram(const int32_t programNumber);
  bool recv_runProgram(const int32_t seqid);
  bool setProgramStartTime(const int32_t hours, const int32_t minutes);
  int32_t send_setProgramStartTime(const int32_t hours, const int32_t minutes);
  bool recv_setProgramStartTime(const int32_t seqid);
  void selectProgram(BulkData& _return);
  int32_t send_selectProgram();
  void recv_selectProgram(BulkData& _return, const int32_t seqid);
  void sendAll(BulkData& _return);
  int32_t send_sendAll();
  void recv_sendAll(BulkData& _return, const int32_t seqid);
  void sendUpdate(UpdateData& _return);
  int32_t send_sendUpdate();
  void recv_sendUpdate(UpdateData& _return, const int32_t seqid);
  bool selectEvenMode();
  int32_t send_selectEvenMode();
  bool recv_selectEvenMode(const int32_t seqid);
  bool selectOddMode();
  int32_t send_selectOddMode();
  bool recv_selectOddMode(const int32_t seqid);
  bool selectDayMode();
  int32_t send_selectDayMode();
  bool recv_selectDayMode(const int32_t seqid);
  bool setDays(const std::vector<Day::type> & days);
  int32_t send_setDays(const std::vector<Day::type> & days);
  bool recv_setDays(const int32_t seqid);
  bool selectIntervalMode();
  int32_t send_selectIntervalMode();
  bool recv_selectIntervalMode(const int32_t seqid);
  bool setInterval(const int64_t interval);
  int32_t send_setInterval(const int64_t interval);
  bool recv_setInterval(const int32_t seqid);
  bool runZone(const int32_t zoneNumber);
  int32_t send_runZone(const int32_t zoneNumber);
  bool recv_runZone(const int32_t seqid);
  bool setZones(const std::vector<int32_t> & zones);
  int32_t send_setZones(const std::vector<int32_t> & zones);
  bool recv_setZones(const int32_t seqid);
  bool setZoneName(const int32_t zoneNumber, const std::string& zoneName);
  int32_t send_setZoneName(const int32_t zoneNumber, const std::string& zoneName);
  bool recv_setZoneName(const int32_t seqid);
  bool setZoneDuration(const int32_t zoneNumber, const int32_t duration);
  int32_t send_setZoneDuration(const int32_t zoneNumber, const int32_t duration);
  bool recv_setZoneDuration(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
