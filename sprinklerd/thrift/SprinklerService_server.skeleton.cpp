// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "SprinklerService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::SprinklerServerThrift;

class SprinklerServiceHandler : virtual public SprinklerServiceIf {
 public:
  SprinklerServiceHandler() {
    // Your initialization goes here
  }

  bool runTimer() {
    // Your implementation goes here
    printf("runTimer\n");
  }

  bool shutdown() {
    // Your implementation goes here
    printf("shutdown\n");
  }

  bool checkSession(const bool startSession) {
    // Your implementation goes here
    printf("checkSession\n");
  }

  bool runProgram(const int32_t programNumber) {
    // Your implementation goes here
    printf("runProgram\n");
  }

  bool setProgramStartTime(const int32_t hours, const int32_t minutes) {
    // Your implementation goes here
    printf("setProgramStartTime\n");
  }

  void selectProgram(BulkData& _return) {
    // Your implementation goes here
    printf("selectProgram\n");
  }

  void sendAll(BulkData& _return) {
    // Your implementation goes here
    printf("sendAll\n");
  }

  void sendUpdate(UpdateData& _return) {
    // Your implementation goes here
    printf("sendUpdate\n");
  }

  bool selectEvenMode() {
    // Your implementation goes here
    printf("selectEvenMode\n");
  }

  bool selectOddMode() {
    // Your implementation goes here
    printf("selectOddMode\n");
  }

  bool selectDayMode() {
    // Your implementation goes here
    printf("selectDayMode\n");
  }

  bool setDays(const std::vector<Day::type> & days) {
    // Your implementation goes here
    printf("setDays\n");
  }

  bool selectIntervalMode() {
    // Your implementation goes here
    printf("selectIntervalMode\n");
  }

  bool setInterval(const int64_t interval) {
    // Your implementation goes here
    printf("setInterval\n");
  }

  bool runZone(const int32_t zoneNumber) {
    // Your implementation goes here
    printf("runZone\n");
  }

  bool setZones(const std::vector<int32_t> & zones) {
    // Your implementation goes here
    printf("setZones\n");
  }

  bool setZoneName(const int32_t zoneNumber, const std::string& zoneName) {
    // Your implementation goes here
    printf("setZoneName\n");
  }

  bool setZoneDuration(const int32_t zoneNumber, const int32_t duration) {
    // Your implementation goes here
    printf("setZoneDuration\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<SprinklerServiceHandler> handler(new SprinklerServiceHandler());
  shared_ptr<TProcessor> processor(new SprinklerServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

