/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SprinklerServer_TYPES_H
#define SprinklerServer_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace SprinklerServerThrift {

struct RunState {
  enum type {
    RS_AUTO = 1,
    RS_MANUAL = 2,
    RS_RAIN = 3,
    RS_OFF = 4
  };
};

extern const std::map<int, const char*> _RunState_VALUES_TO_NAMES;

struct Day {
  enum type {
    SUNDAY = 1,
    MONDAY = 2,
    TUESDAY = 3,
    WEDNESDAY = 4,
    THURSDAY = 5,
    FRIDAY = 6,
    SATURDAY = 7
  };
};

extern const std::map<int, const char*> _Day_VALUES_TO_NAMES;

struct ProgramMode {
  enum type {
    DAY_OF_WEEK = 1,
    EVEN_DAYS = 2,
    ODD_DAYS = 3,
    DAY_INTERVAL = 4
  };
};

extern const std::map<int, const char*> _ProgramMode_VALUES_TO_NAMES;

class Zone;

class BulkData;

class UpdateData;

typedef struct _Zone__isset {
  _Zone__isset() : number(false), duration(false), name(false), enabledForCurrentProgram(false) {}
  bool number :1;
  bool duration :1;
  bool name :1;
  bool enabledForCurrentProgram :1;
} _Zone__isset;

class Zone {
 public:

  Zone(const Zone&);
  Zone& operator=(const Zone&);
  Zone() : number(0), duration(0), name(), enabledForCurrentProgram(0) {
  }

  virtual ~Zone() throw();
  int32_t number;
  int32_t duration;
  std::string name;
  bool enabledForCurrentProgram;

  _Zone__isset __isset;

  void __set_number(const int32_t val);

  void __set_duration(const int32_t val);

  void __set_name(const std::string& val);

  void __set_enabledForCurrentProgram(const bool val);

  bool operator == (const Zone & rhs) const
  {
    if (!(number == rhs.number))
      return false;
    if (!(duration == rhs.duration))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(enabledForCurrentProgram == rhs.enabledForCurrentProgram))
      return false;
    return true;
  }
  bool operator != (const Zone &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Zone & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Zone &a, Zone &b);

inline std::ostream& operator<<(std::ostream& out, const Zone& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _BulkData__isset {
  _BulkData__isset() : runState(false), startTimeOverlap(false), currentProgram(false), startHour(false), startMin(false), programMode(false), programInterval(false), programDays(false), programZones(false) {}
  bool runState :1;
  bool startTimeOverlap :1;
  bool currentProgram :1;
  bool startHour :1;
  bool startMin :1;
  bool programMode :1;
  bool programInterval :1;
  bool programDays :1;
  bool programZones :1;
} _BulkData__isset;

class BulkData {
 public:

  BulkData(const BulkData&);
  BulkData& operator=(const BulkData&);
  BulkData() : runState((RunState::type)0), startTimeOverlap(0), currentProgram(0), startHour(0), startMin(0), programMode((ProgramMode::type)0), programInterval(0) {
  }

  virtual ~BulkData() throw();
  RunState::type runState;
  bool startTimeOverlap;
  int32_t currentProgram;
  int32_t startHour;
  int32_t startMin;
  ProgramMode::type programMode;
  int32_t programInterval;
  std::vector<Day::type>  programDays;
  std::vector<Zone>  programZones;

  _BulkData__isset __isset;

  void __set_runState(const RunState::type val);

  void __set_startTimeOverlap(const bool val);

  void __set_currentProgram(const int32_t val);

  void __set_startHour(const int32_t val);

  void __set_startMin(const int32_t val);

  void __set_programMode(const ProgramMode::type val);

  void __set_programInterval(const int32_t val);

  void __set_programDays(const std::vector<Day::type> & val);

  void __set_programZones(const std::vector<Zone> & val);

  bool operator == (const BulkData & rhs) const
  {
    if (!(runState == rhs.runState))
      return false;
    if (!(startTimeOverlap == rhs.startTimeOverlap))
      return false;
    if (!(currentProgram == rhs.currentProgram))
      return false;
    if (!(startHour == rhs.startHour))
      return false;
    if (!(startMin == rhs.startMin))
      return false;
    if (!(programMode == rhs.programMode))
      return false;
    if (!(programInterval == rhs.programInterval))
      return false;
    if (!(programDays == rhs.programDays))
      return false;
    if (!(programZones == rhs.programZones))
      return false;
    return true;
  }
  bool operator != (const BulkData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BulkData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BulkData &a, BulkData &b);

inline std::ostream& operator<<(std::ostream& out, const BulkData& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _UpdateData__isset {
  _UpdateData__isset() : hour(false), minute(false), activeProgram(false), activeZone(false), manualProgram(false), manualZone(false), runState(false), startTimeOverlap(false), todaysPrograms(false) {}
  bool hour :1;
  bool minute :1;
  bool activeProgram :1;
  bool activeZone :1;
  bool manualProgram :1;
  bool manualZone :1;
  bool runState :1;
  bool startTimeOverlap :1;
  bool todaysPrograms :1;
} _UpdateData__isset;

class UpdateData {
 public:

  UpdateData(const UpdateData&);
  UpdateData& operator=(const UpdateData&);
  UpdateData() : hour(0), minute(0), activeProgram(0), activeZone(0), manualProgram(0), manualZone(0), runState((RunState::type)0), startTimeOverlap(0) {
  }

  virtual ~UpdateData() throw();
  int32_t hour;
  int32_t minute;
  int32_t activeProgram;
  int32_t activeZone;
  int32_t manualProgram;
  int32_t manualZone;
  RunState::type runState;
  bool startTimeOverlap;
  std::vector<int32_t>  todaysPrograms;

  _UpdateData__isset __isset;

  void __set_hour(const int32_t val);

  void __set_minute(const int32_t val);

  void __set_activeProgram(const int32_t val);

  void __set_activeZone(const int32_t val);

  void __set_manualProgram(const int32_t val);

  void __set_manualZone(const int32_t val);

  void __set_runState(const RunState::type val);

  void __set_startTimeOverlap(const bool val);

  void __set_todaysPrograms(const std::vector<int32_t> & val);

  bool operator == (const UpdateData & rhs) const
  {
    if (!(hour == rhs.hour))
      return false;
    if (!(minute == rhs.minute))
      return false;
    if (!(activeProgram == rhs.activeProgram))
      return false;
    if (!(activeZone == rhs.activeZone))
      return false;
    if (!(manualProgram == rhs.manualProgram))
      return false;
    if (!(manualZone == rhs.manualZone))
      return false;
    if (!(runState == rhs.runState))
      return false;
    if (!(startTimeOverlap == rhs.startTimeOverlap))
      return false;
    if (!(todaysPrograms == rhs.todaysPrograms))
      return false;
    return true;
  }
  bool operator != (const UpdateData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UpdateData &a, UpdateData &b);

inline std::ostream& operator<<(std::ostream& out, const UpdateData& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
