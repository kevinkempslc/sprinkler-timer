/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package SprinklerServer.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-08-02")
public class UpdateData implements org.apache.thrift.TBase<UpdateData, UpdateData._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateData");

  private static final org.apache.thrift.protocol.TField HOUR_FIELD_DESC = new org.apache.thrift.protocol.TField("hour", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MINUTE_FIELD_DESC = new org.apache.thrift.protocol.TField("minute", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ACTIVE_PROGRAM_FIELD_DESC = new org.apache.thrift.protocol.TField("activeProgram", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ACTIVE_ZONE_FIELD_DESC = new org.apache.thrift.protocol.TField("activeZone", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField MANUAL_PROGRAM_FIELD_DESC = new org.apache.thrift.protocol.TField("manualProgram", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField MANUAL_ZONE_FIELD_DESC = new org.apache.thrift.protocol.TField("manualZone", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField RUN_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("runState", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField START_TIME_OVERLAP_FIELD_DESC = new org.apache.thrift.protocol.TField("startTimeOverlap", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField TODAYS_PROGRAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("todaysPrograms", org.apache.thrift.protocol.TType.LIST, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UpdateDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UpdateDataTupleSchemeFactory());
  }

  public int hour; // required
  public int minute; // required
  public int activeProgram; // required
  public int activeZone; // required
  public int manualProgram; // required
  public int manualZone; // required
  /**
   * 
   * @see RunState
   */
  public RunState runState; // required
  public boolean startTimeOverlap; // required
  public List<Integer> todaysPrograms; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HOUR((short)1, "hour"),
    MINUTE((short)2, "minute"),
    ACTIVE_PROGRAM((short)3, "activeProgram"),
    ACTIVE_ZONE((short)4, "activeZone"),
    MANUAL_PROGRAM((short)5, "manualProgram"),
    MANUAL_ZONE((short)6, "manualZone"),
    /**
     * 
     * @see RunState
     */
    RUN_STATE((short)7, "runState"),
    START_TIME_OVERLAP((short)8, "startTimeOverlap"),
    TODAYS_PROGRAMS((short)9, "todaysPrograms");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HOUR
          return HOUR;
        case 2: // MINUTE
          return MINUTE;
        case 3: // ACTIVE_PROGRAM
          return ACTIVE_PROGRAM;
        case 4: // ACTIVE_ZONE
          return ACTIVE_ZONE;
        case 5: // MANUAL_PROGRAM
          return MANUAL_PROGRAM;
        case 6: // MANUAL_ZONE
          return MANUAL_ZONE;
        case 7: // RUN_STATE
          return RUN_STATE;
        case 8: // START_TIME_OVERLAP
          return START_TIME_OVERLAP;
        case 9: // TODAYS_PROGRAMS
          return TODAYS_PROGRAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HOUR_ISSET_ID = 0;
  private static final int __MINUTE_ISSET_ID = 1;
  private static final int __ACTIVEPROGRAM_ISSET_ID = 2;
  private static final int __ACTIVEZONE_ISSET_ID = 3;
  private static final int __MANUALPROGRAM_ISSET_ID = 4;
  private static final int __MANUALZONE_ISSET_ID = 5;
  private static final int __STARTTIMEOVERLAP_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HOUR, new org.apache.thrift.meta_data.FieldMetaData("hour", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MINUTE, new org.apache.thrift.meta_data.FieldMetaData("minute", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTIVE_PROGRAM, new org.apache.thrift.meta_data.FieldMetaData("activeProgram", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTIVE_ZONE, new org.apache.thrift.meta_data.FieldMetaData("activeZone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MANUAL_PROGRAM, new org.apache.thrift.meta_data.FieldMetaData("manualProgram", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MANUAL_ZONE, new org.apache.thrift.meta_data.FieldMetaData("manualZone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RUN_STATE, new org.apache.thrift.meta_data.FieldMetaData("runState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RunState.class)));
    tmpMap.put(_Fields.START_TIME_OVERLAP, new org.apache.thrift.meta_data.FieldMetaData("startTimeOverlap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TODAYS_PROGRAMS, new org.apache.thrift.meta_data.FieldMetaData("todaysPrograms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateData.class, metaDataMap);
  }

  public UpdateData() {
  }

  public UpdateData(
    int hour,
    int minute,
    int activeProgram,
    int activeZone,
    int manualProgram,
    int manualZone,
    RunState runState,
    boolean startTimeOverlap,
    List<Integer> todaysPrograms)
  {
    this();
    this.hour = hour;
    setHourIsSet(true);
    this.minute = minute;
    setMinuteIsSet(true);
    this.activeProgram = activeProgram;
    setActiveProgramIsSet(true);
    this.activeZone = activeZone;
    setActiveZoneIsSet(true);
    this.manualProgram = manualProgram;
    setManualProgramIsSet(true);
    this.manualZone = manualZone;
    setManualZoneIsSet(true);
    this.runState = runState;
    this.startTimeOverlap = startTimeOverlap;
    setStartTimeOverlapIsSet(true);
    this.todaysPrograms = todaysPrograms;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UpdateData(UpdateData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.hour = other.hour;
    this.minute = other.minute;
    this.activeProgram = other.activeProgram;
    this.activeZone = other.activeZone;
    this.manualProgram = other.manualProgram;
    this.manualZone = other.manualZone;
    if (other.isSetRunState()) {
      this.runState = other.runState;
    }
    this.startTimeOverlap = other.startTimeOverlap;
    if (other.isSetTodaysPrograms()) {
      List<Integer> __this__todaysPrograms = new ArrayList<Integer>(other.todaysPrograms);
      this.todaysPrograms = __this__todaysPrograms;
    }
  }

  public UpdateData deepCopy() {
    return new UpdateData(this);
  }

  @Override
  public void clear() {
    setHourIsSet(false);
    this.hour = 0;
    setMinuteIsSet(false);
    this.minute = 0;
    setActiveProgramIsSet(false);
    this.activeProgram = 0;
    setActiveZoneIsSet(false);
    this.activeZone = 0;
    setManualProgramIsSet(false);
    this.manualProgram = 0;
    setManualZoneIsSet(false);
    this.manualZone = 0;
    this.runState = null;
    setStartTimeOverlapIsSet(false);
    this.startTimeOverlap = false;
    this.todaysPrograms = null;
  }

  public int getHour() {
    return this.hour;
  }

  public UpdateData setHour(int hour) {
    this.hour = hour;
    setHourIsSet(true);
    return this;
  }

  public void unsetHour() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOUR_ISSET_ID);
  }

  /** Returns true if field hour is set (has been assigned a value) and false otherwise */
  public boolean isSetHour() {
    return EncodingUtils.testBit(__isset_bitfield, __HOUR_ISSET_ID);
  }

  public void setHourIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOUR_ISSET_ID, value);
  }

  public int getMinute() {
    return this.minute;
  }

  public UpdateData setMinute(int minute) {
    this.minute = minute;
    setMinuteIsSet(true);
    return this;
  }

  public void unsetMinute() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINUTE_ISSET_ID);
  }

  /** Returns true if field minute is set (has been assigned a value) and false otherwise */
  public boolean isSetMinute() {
    return EncodingUtils.testBit(__isset_bitfield, __MINUTE_ISSET_ID);
  }

  public void setMinuteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINUTE_ISSET_ID, value);
  }

  public int getActiveProgram() {
    return this.activeProgram;
  }

  public UpdateData setActiveProgram(int activeProgram) {
    this.activeProgram = activeProgram;
    setActiveProgramIsSet(true);
    return this;
  }

  public void unsetActiveProgram() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVEPROGRAM_ISSET_ID);
  }

  /** Returns true if field activeProgram is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveProgram() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVEPROGRAM_ISSET_ID);
  }

  public void setActiveProgramIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVEPROGRAM_ISSET_ID, value);
  }

  public int getActiveZone() {
    return this.activeZone;
  }

  public UpdateData setActiveZone(int activeZone) {
    this.activeZone = activeZone;
    setActiveZoneIsSet(true);
    return this;
  }

  public void unsetActiveZone() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVEZONE_ISSET_ID);
  }

  /** Returns true if field activeZone is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveZone() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVEZONE_ISSET_ID);
  }

  public void setActiveZoneIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVEZONE_ISSET_ID, value);
  }

  public int getManualProgram() {
    return this.manualProgram;
  }

  public UpdateData setManualProgram(int manualProgram) {
    this.manualProgram = manualProgram;
    setManualProgramIsSet(true);
    return this;
  }

  public void unsetManualProgram() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MANUALPROGRAM_ISSET_ID);
  }

  /** Returns true if field manualProgram is set (has been assigned a value) and false otherwise */
  public boolean isSetManualProgram() {
    return EncodingUtils.testBit(__isset_bitfield, __MANUALPROGRAM_ISSET_ID);
  }

  public void setManualProgramIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MANUALPROGRAM_ISSET_ID, value);
  }

  public int getManualZone() {
    return this.manualZone;
  }

  public UpdateData setManualZone(int manualZone) {
    this.manualZone = manualZone;
    setManualZoneIsSet(true);
    return this;
  }

  public void unsetManualZone() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MANUALZONE_ISSET_ID);
  }

  /** Returns true if field manualZone is set (has been assigned a value) and false otherwise */
  public boolean isSetManualZone() {
    return EncodingUtils.testBit(__isset_bitfield, __MANUALZONE_ISSET_ID);
  }

  public void setManualZoneIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MANUALZONE_ISSET_ID, value);
  }

  /**
   * 
   * @see RunState
   */
  public RunState getRunState() {
    return this.runState;
  }

  /**
   * 
   * @see RunState
   */
  public UpdateData setRunState(RunState runState) {
    this.runState = runState;
    return this;
  }

  public void unsetRunState() {
    this.runState = null;
  }

  /** Returns true if field runState is set (has been assigned a value) and false otherwise */
  public boolean isSetRunState() {
    return this.runState != null;
  }

  public void setRunStateIsSet(boolean value) {
    if (!value) {
      this.runState = null;
    }
  }

  public boolean isStartTimeOverlap() {
    return this.startTimeOverlap;
  }

  public UpdateData setStartTimeOverlap(boolean startTimeOverlap) {
    this.startTimeOverlap = startTimeOverlap;
    setStartTimeOverlapIsSet(true);
    return this;
  }

  public void unsetStartTimeOverlap() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIMEOVERLAP_ISSET_ID);
  }

  /** Returns true if field startTimeOverlap is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTimeOverlap() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIMEOVERLAP_ISSET_ID);
  }

  public void setStartTimeOverlapIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIMEOVERLAP_ISSET_ID, value);
  }

  public int getTodaysProgramsSize() {
    return (this.todaysPrograms == null) ? 0 : this.todaysPrograms.size();
  }

  public java.util.Iterator<Integer> getTodaysProgramsIterator() {
    return (this.todaysPrograms == null) ? null : this.todaysPrograms.iterator();
  }

  public void addToTodaysPrograms(int elem) {
    if (this.todaysPrograms == null) {
      this.todaysPrograms = new ArrayList<Integer>();
    }
    this.todaysPrograms.add(elem);
  }

  public List<Integer> getTodaysPrograms() {
    return this.todaysPrograms;
  }

  public UpdateData setTodaysPrograms(List<Integer> todaysPrograms) {
    this.todaysPrograms = todaysPrograms;
    return this;
  }

  public void unsetTodaysPrograms() {
    this.todaysPrograms = null;
  }

  /** Returns true if field todaysPrograms is set (has been assigned a value) and false otherwise */
  public boolean isSetTodaysPrograms() {
    return this.todaysPrograms != null;
  }

  public void setTodaysProgramsIsSet(boolean value) {
    if (!value) {
      this.todaysPrograms = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HOUR:
      if (value == null) {
        unsetHour();
      } else {
        setHour((Integer)value);
      }
      break;

    case MINUTE:
      if (value == null) {
        unsetMinute();
      } else {
        setMinute((Integer)value);
      }
      break;

    case ACTIVE_PROGRAM:
      if (value == null) {
        unsetActiveProgram();
      } else {
        setActiveProgram((Integer)value);
      }
      break;

    case ACTIVE_ZONE:
      if (value == null) {
        unsetActiveZone();
      } else {
        setActiveZone((Integer)value);
      }
      break;

    case MANUAL_PROGRAM:
      if (value == null) {
        unsetManualProgram();
      } else {
        setManualProgram((Integer)value);
      }
      break;

    case MANUAL_ZONE:
      if (value == null) {
        unsetManualZone();
      } else {
        setManualZone((Integer)value);
      }
      break;

    case RUN_STATE:
      if (value == null) {
        unsetRunState();
      } else {
        setRunState((RunState)value);
      }
      break;

    case START_TIME_OVERLAP:
      if (value == null) {
        unsetStartTimeOverlap();
      } else {
        setStartTimeOverlap((Boolean)value);
      }
      break;

    case TODAYS_PROGRAMS:
      if (value == null) {
        unsetTodaysPrograms();
      } else {
        setTodaysPrograms((List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HOUR:
      return getHour();

    case MINUTE:
      return getMinute();

    case ACTIVE_PROGRAM:
      return getActiveProgram();

    case ACTIVE_ZONE:
      return getActiveZone();

    case MANUAL_PROGRAM:
      return getManualProgram();

    case MANUAL_ZONE:
      return getManualZone();

    case RUN_STATE:
      return getRunState();

    case START_TIME_OVERLAP:
      return isStartTimeOverlap();

    case TODAYS_PROGRAMS:
      return getTodaysPrograms();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HOUR:
      return isSetHour();
    case MINUTE:
      return isSetMinute();
    case ACTIVE_PROGRAM:
      return isSetActiveProgram();
    case ACTIVE_ZONE:
      return isSetActiveZone();
    case MANUAL_PROGRAM:
      return isSetManualProgram();
    case MANUAL_ZONE:
      return isSetManualZone();
    case RUN_STATE:
      return isSetRunState();
    case START_TIME_OVERLAP:
      return isSetStartTimeOverlap();
    case TODAYS_PROGRAMS:
      return isSetTodaysPrograms();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UpdateData)
      return this.equals((UpdateData)that);
    return false;
  }

  public boolean equals(UpdateData that) {
    if (that == null)
      return false;

    boolean this_present_hour = true;
    boolean that_present_hour = true;
    if (this_present_hour || that_present_hour) {
      if (!(this_present_hour && that_present_hour))
        return false;
      if (this.hour != that.hour)
        return false;
    }

    boolean this_present_minute = true;
    boolean that_present_minute = true;
    if (this_present_minute || that_present_minute) {
      if (!(this_present_minute && that_present_minute))
        return false;
      if (this.minute != that.minute)
        return false;
    }

    boolean this_present_activeProgram = true;
    boolean that_present_activeProgram = true;
    if (this_present_activeProgram || that_present_activeProgram) {
      if (!(this_present_activeProgram && that_present_activeProgram))
        return false;
      if (this.activeProgram != that.activeProgram)
        return false;
    }

    boolean this_present_activeZone = true;
    boolean that_present_activeZone = true;
    if (this_present_activeZone || that_present_activeZone) {
      if (!(this_present_activeZone && that_present_activeZone))
        return false;
      if (this.activeZone != that.activeZone)
        return false;
    }

    boolean this_present_manualProgram = true;
    boolean that_present_manualProgram = true;
    if (this_present_manualProgram || that_present_manualProgram) {
      if (!(this_present_manualProgram && that_present_manualProgram))
        return false;
      if (this.manualProgram != that.manualProgram)
        return false;
    }

    boolean this_present_manualZone = true;
    boolean that_present_manualZone = true;
    if (this_present_manualZone || that_present_manualZone) {
      if (!(this_present_manualZone && that_present_manualZone))
        return false;
      if (this.manualZone != that.manualZone)
        return false;
    }

    boolean this_present_runState = true && this.isSetRunState();
    boolean that_present_runState = true && that.isSetRunState();
    if (this_present_runState || that_present_runState) {
      if (!(this_present_runState && that_present_runState))
        return false;
      if (!this.runState.equals(that.runState))
        return false;
    }

    boolean this_present_startTimeOverlap = true;
    boolean that_present_startTimeOverlap = true;
    if (this_present_startTimeOverlap || that_present_startTimeOverlap) {
      if (!(this_present_startTimeOverlap && that_present_startTimeOverlap))
        return false;
      if (this.startTimeOverlap != that.startTimeOverlap)
        return false;
    }

    boolean this_present_todaysPrograms = true && this.isSetTodaysPrograms();
    boolean that_present_todaysPrograms = true && that.isSetTodaysPrograms();
    if (this_present_todaysPrograms || that_present_todaysPrograms) {
      if (!(this_present_todaysPrograms && that_present_todaysPrograms))
        return false;
      if (!this.todaysPrograms.equals(that.todaysPrograms))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_hour = true;
    list.add(present_hour);
    if (present_hour)
      list.add(hour);

    boolean present_minute = true;
    list.add(present_minute);
    if (present_minute)
      list.add(minute);

    boolean present_activeProgram = true;
    list.add(present_activeProgram);
    if (present_activeProgram)
      list.add(activeProgram);

    boolean present_activeZone = true;
    list.add(present_activeZone);
    if (present_activeZone)
      list.add(activeZone);

    boolean present_manualProgram = true;
    list.add(present_manualProgram);
    if (present_manualProgram)
      list.add(manualProgram);

    boolean present_manualZone = true;
    list.add(present_manualZone);
    if (present_manualZone)
      list.add(manualZone);

    boolean present_runState = true && (isSetRunState());
    list.add(present_runState);
    if (present_runState)
      list.add(runState.getValue());

    boolean present_startTimeOverlap = true;
    list.add(present_startTimeOverlap);
    if (present_startTimeOverlap)
      list.add(startTimeOverlap);

    boolean present_todaysPrograms = true && (isSetTodaysPrograms());
    list.add(present_todaysPrograms);
    if (present_todaysPrograms)
      list.add(todaysPrograms);

    return list.hashCode();
  }

  @Override
  public int compareTo(UpdateData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHour()).compareTo(other.isSetHour());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHour()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hour, other.hour);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinute()).compareTo(other.isSetMinute());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinute()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minute, other.minute);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveProgram()).compareTo(other.isSetActiveProgram());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveProgram()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeProgram, other.activeProgram);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveZone()).compareTo(other.isSetActiveZone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveZone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeZone, other.activeZone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetManualProgram()).compareTo(other.isSetManualProgram());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManualProgram()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.manualProgram, other.manualProgram);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetManualZone()).compareTo(other.isSetManualZone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManualZone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.manualZone, other.manualZone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRunState()).compareTo(other.isSetRunState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runState, other.runState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTimeOverlap()).compareTo(other.isSetStartTimeOverlap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTimeOverlap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTimeOverlap, other.startTimeOverlap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTodaysPrograms()).compareTo(other.isSetTodaysPrograms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTodaysPrograms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.todaysPrograms, other.todaysPrograms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UpdateData(");
    boolean first = true;

    sb.append("hour:");
    sb.append(this.hour);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minute:");
    sb.append(this.minute);
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeProgram:");
    sb.append(this.activeProgram);
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeZone:");
    sb.append(this.activeZone);
    first = false;
    if (!first) sb.append(", ");
    sb.append("manualProgram:");
    sb.append(this.manualProgram);
    first = false;
    if (!first) sb.append(", ");
    sb.append("manualZone:");
    sb.append(this.manualZone);
    first = false;
    if (!first) sb.append(", ");
    sb.append("runState:");
    if (this.runState == null) {
      sb.append("null");
    } else {
      sb.append(this.runState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTimeOverlap:");
    sb.append(this.startTimeOverlap);
    first = false;
    if (!first) sb.append(", ");
    sb.append("todaysPrograms:");
    if (this.todaysPrograms == null) {
      sb.append("null");
    } else {
      sb.append(this.todaysPrograms);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UpdateDataStandardSchemeFactory implements SchemeFactory {
    public UpdateDataStandardScheme getScheme() {
      return new UpdateDataStandardScheme();
    }
  }

  private static class UpdateDataStandardScheme extends StandardScheme<UpdateData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HOUR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hour = iprot.readI32();
              struct.setHourIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MINUTE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minute = iprot.readI32();
              struct.setMinuteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACTIVE_PROGRAM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.activeProgram = iprot.readI32();
              struct.setActiveProgramIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACTIVE_ZONE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.activeZone = iprot.readI32();
              struct.setActiveZoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MANUAL_PROGRAM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.manualProgram = iprot.readI32();
              struct.setManualProgramIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MANUAL_ZONE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.manualZone = iprot.readI32();
              struct.setManualZoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RUN_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.runState = SprinklerServer.thrift.RunState.findByValue(iprot.readI32());
              struct.setRunStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // START_TIME_OVERLAP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.startTimeOverlap = iprot.readBool();
              struct.setStartTimeOverlapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TODAYS_PROGRAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.todaysPrograms = new ArrayList<Integer>(_list16.size);
                int _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = iprot.readI32();
                  struct.todaysPrograms.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setTodaysProgramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(HOUR_FIELD_DESC);
      oprot.writeI32(struct.hour);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MINUTE_FIELD_DESC);
      oprot.writeI32(struct.minute);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTIVE_PROGRAM_FIELD_DESC);
      oprot.writeI32(struct.activeProgram);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTIVE_ZONE_FIELD_DESC);
      oprot.writeI32(struct.activeZone);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MANUAL_PROGRAM_FIELD_DESC);
      oprot.writeI32(struct.manualProgram);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MANUAL_ZONE_FIELD_DESC);
      oprot.writeI32(struct.manualZone);
      oprot.writeFieldEnd();
      if (struct.runState != null) {
        oprot.writeFieldBegin(RUN_STATE_FIELD_DESC);
        oprot.writeI32(struct.runState.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_TIME_OVERLAP_FIELD_DESC);
      oprot.writeBool(struct.startTimeOverlap);
      oprot.writeFieldEnd();
      if (struct.todaysPrograms != null) {
        oprot.writeFieldBegin(TODAYS_PROGRAMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.todaysPrograms.size()));
          for (int _iter19 : struct.todaysPrograms)
          {
            oprot.writeI32(_iter19);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UpdateDataTupleSchemeFactory implements SchemeFactory {
    public UpdateDataTupleScheme getScheme() {
      return new UpdateDataTupleScheme();
    }
  }

  private static class UpdateDataTupleScheme extends TupleScheme<UpdateData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UpdateData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHour()) {
        optionals.set(0);
      }
      if (struct.isSetMinute()) {
        optionals.set(1);
      }
      if (struct.isSetActiveProgram()) {
        optionals.set(2);
      }
      if (struct.isSetActiveZone()) {
        optionals.set(3);
      }
      if (struct.isSetManualProgram()) {
        optionals.set(4);
      }
      if (struct.isSetManualZone()) {
        optionals.set(5);
      }
      if (struct.isSetRunState()) {
        optionals.set(6);
      }
      if (struct.isSetStartTimeOverlap()) {
        optionals.set(7);
      }
      if (struct.isSetTodaysPrograms()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetHour()) {
        oprot.writeI32(struct.hour);
      }
      if (struct.isSetMinute()) {
        oprot.writeI32(struct.minute);
      }
      if (struct.isSetActiveProgram()) {
        oprot.writeI32(struct.activeProgram);
      }
      if (struct.isSetActiveZone()) {
        oprot.writeI32(struct.activeZone);
      }
      if (struct.isSetManualProgram()) {
        oprot.writeI32(struct.manualProgram);
      }
      if (struct.isSetManualZone()) {
        oprot.writeI32(struct.manualZone);
      }
      if (struct.isSetRunState()) {
        oprot.writeI32(struct.runState.getValue());
      }
      if (struct.isSetStartTimeOverlap()) {
        oprot.writeBool(struct.startTimeOverlap);
      }
      if (struct.isSetTodaysPrograms()) {
        {
          oprot.writeI32(struct.todaysPrograms.size());
          for (int _iter20 : struct.todaysPrograms)
          {
            oprot.writeI32(_iter20);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UpdateData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.hour = iprot.readI32();
        struct.setHourIsSet(true);
      }
      if (incoming.get(1)) {
        struct.minute = iprot.readI32();
        struct.setMinuteIsSet(true);
      }
      if (incoming.get(2)) {
        struct.activeProgram = iprot.readI32();
        struct.setActiveProgramIsSet(true);
      }
      if (incoming.get(3)) {
        struct.activeZone = iprot.readI32();
        struct.setActiveZoneIsSet(true);
      }
      if (incoming.get(4)) {
        struct.manualProgram = iprot.readI32();
        struct.setManualProgramIsSet(true);
      }
      if (incoming.get(5)) {
        struct.manualZone = iprot.readI32();
        struct.setManualZoneIsSet(true);
      }
      if (incoming.get(6)) {
        struct.runState = SprinklerServer.thrift.RunState.findByValue(iprot.readI32());
        struct.setRunStateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.startTimeOverlap = iprot.readBool();
        struct.setStartTimeOverlapIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.todaysPrograms = new ArrayList<Integer>(_list21.size);
          int _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readI32();
            struct.todaysPrograms.add(_elem22);
          }
        }
        struct.setTodaysProgramsIsSet(true);
      }
    }
  }

}

