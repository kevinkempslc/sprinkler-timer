/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package SprinklerServer.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-08-02")
public class BulkData implements org.apache.thrift.TBase<BulkData, BulkData._Fields>, java.io.Serializable, Cloneable, Comparable<BulkData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BulkData");

  private static final org.apache.thrift.protocol.TField RUN_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("runState", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField START_TIME_OVERLAP_FIELD_DESC = new org.apache.thrift.protocol.TField("startTimeOverlap", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField CURRENT_PROGRAM_FIELD_DESC = new org.apache.thrift.protocol.TField("currentProgram", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField START_HOUR_FIELD_DESC = new org.apache.thrift.protocol.TField("startHour", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField START_MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("startMin", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PROGRAM_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("programMode", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PROGRAM_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("programInterval", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PROGRAM_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("programDays", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField PROGRAM_ZONES_FIELD_DESC = new org.apache.thrift.protocol.TField("programZones", org.apache.thrift.protocol.TType.LIST, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BulkDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BulkDataTupleSchemeFactory());
  }

  /**
   * 
   * @see RunState
   */
  public RunState runState; // required
  public boolean startTimeOverlap; // required
  public int currentProgram; // required
  public int startHour; // required
  public int startMin; // required
  /**
   * 
   * @see ProgramMode
   */
  public ProgramMode programMode; // required
  public int programInterval; // required
  public List<Day> programDays; // required
  public List<Zone> programZones; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see RunState
     */
    RUN_STATE((short)1, "runState"),
    START_TIME_OVERLAP((short)2, "startTimeOverlap"),
    CURRENT_PROGRAM((short)3, "currentProgram"),
    START_HOUR((short)4, "startHour"),
    START_MIN((short)5, "startMin"),
    /**
     * 
     * @see ProgramMode
     */
    PROGRAM_MODE((short)6, "programMode"),
    PROGRAM_INTERVAL((short)7, "programInterval"),
    PROGRAM_DAYS((short)8, "programDays"),
    PROGRAM_ZONES((short)9, "programZones");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RUN_STATE
          return RUN_STATE;
        case 2: // START_TIME_OVERLAP
          return START_TIME_OVERLAP;
        case 3: // CURRENT_PROGRAM
          return CURRENT_PROGRAM;
        case 4: // START_HOUR
          return START_HOUR;
        case 5: // START_MIN
          return START_MIN;
        case 6: // PROGRAM_MODE
          return PROGRAM_MODE;
        case 7: // PROGRAM_INTERVAL
          return PROGRAM_INTERVAL;
        case 8: // PROGRAM_DAYS
          return PROGRAM_DAYS;
        case 9: // PROGRAM_ZONES
          return PROGRAM_ZONES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTTIMEOVERLAP_ISSET_ID = 0;
  private static final int __CURRENTPROGRAM_ISSET_ID = 1;
  private static final int __STARTHOUR_ISSET_ID = 2;
  private static final int __STARTMIN_ISSET_ID = 3;
  private static final int __PROGRAMINTERVAL_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RUN_STATE, new org.apache.thrift.meta_data.FieldMetaData("runState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RunState.class)));
    tmpMap.put(_Fields.START_TIME_OVERLAP, new org.apache.thrift.meta_data.FieldMetaData("startTimeOverlap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CURRENT_PROGRAM, new org.apache.thrift.meta_data.FieldMetaData("currentProgram", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_HOUR, new org.apache.thrift.meta_data.FieldMetaData("startHour", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_MIN, new org.apache.thrift.meta_data.FieldMetaData("startMin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROGRAM_MODE, new org.apache.thrift.meta_data.FieldMetaData("programMode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ProgramMode.class)));
    tmpMap.put(_Fields.PROGRAM_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("programInterval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROGRAM_DAYS, new org.apache.thrift.meta_data.FieldMetaData("programDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Day.class))));
    tmpMap.put(_Fields.PROGRAM_ZONES, new org.apache.thrift.meta_data.FieldMetaData("programZones", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Zone.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BulkData.class, metaDataMap);
  }

  public BulkData() {
  }

  public BulkData(
    RunState runState,
    boolean startTimeOverlap,
    int currentProgram,
    int startHour,
    int startMin,
    ProgramMode programMode,
    int programInterval,
    List<Day> programDays,
    List<Zone> programZones)
  {
    this();
    this.runState = runState;
    this.startTimeOverlap = startTimeOverlap;
    setStartTimeOverlapIsSet(true);
    this.currentProgram = currentProgram;
    setCurrentProgramIsSet(true);
    this.startHour = startHour;
    setStartHourIsSet(true);
    this.startMin = startMin;
    setStartMinIsSet(true);
    this.programMode = programMode;
    this.programInterval = programInterval;
    setProgramIntervalIsSet(true);
    this.programDays = programDays;
    this.programZones = programZones;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BulkData(BulkData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRunState()) {
      this.runState = other.runState;
    }
    this.startTimeOverlap = other.startTimeOverlap;
    this.currentProgram = other.currentProgram;
    this.startHour = other.startHour;
    this.startMin = other.startMin;
    if (other.isSetProgramMode()) {
      this.programMode = other.programMode;
    }
    this.programInterval = other.programInterval;
    if (other.isSetProgramDays()) {
      List<Day> __this__programDays = new ArrayList<Day>(other.programDays.size());
      for (Day other_element : other.programDays) {
        __this__programDays.add(other_element);
      }
      this.programDays = __this__programDays;
    }
    if (other.isSetProgramZones()) {
      List<Zone> __this__programZones = new ArrayList<Zone>(other.programZones.size());
      for (Zone other_element : other.programZones) {
        __this__programZones.add(new Zone(other_element));
      }
      this.programZones = __this__programZones;
    }
  }

  public BulkData deepCopy() {
    return new BulkData(this);
  }

  @Override
  public void clear() {
    this.runState = null;
    setStartTimeOverlapIsSet(false);
    this.startTimeOverlap = false;
    setCurrentProgramIsSet(false);
    this.currentProgram = 0;
    setStartHourIsSet(false);
    this.startHour = 0;
    setStartMinIsSet(false);
    this.startMin = 0;
    this.programMode = null;
    setProgramIntervalIsSet(false);
    this.programInterval = 0;
    this.programDays = null;
    this.programZones = null;
  }

  /**
   * 
   * @see RunState
   */
  public RunState getRunState() {
    return this.runState;
  }

  /**
   * 
   * @see RunState
   */
  public BulkData setRunState(RunState runState) {
    this.runState = runState;
    return this;
  }

  public void unsetRunState() {
    this.runState = null;
  }

  /** Returns true if field runState is set (has been assigned a value) and false otherwise */
  public boolean isSetRunState() {
    return this.runState != null;
  }

  public void setRunStateIsSet(boolean value) {
    if (!value) {
      this.runState = null;
    }
  }

  public boolean isStartTimeOverlap() {
    return this.startTimeOverlap;
  }

  public BulkData setStartTimeOverlap(boolean startTimeOverlap) {
    this.startTimeOverlap = startTimeOverlap;
    setStartTimeOverlapIsSet(true);
    return this;
  }

  public void unsetStartTimeOverlap() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIMEOVERLAP_ISSET_ID);
  }

  /** Returns true if field startTimeOverlap is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTimeOverlap() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIMEOVERLAP_ISSET_ID);
  }

  public void setStartTimeOverlapIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIMEOVERLAP_ISSET_ID, value);
  }

  public int getCurrentProgram() {
    return this.currentProgram;
  }

  public BulkData setCurrentProgram(int currentProgram) {
    this.currentProgram = currentProgram;
    setCurrentProgramIsSet(true);
    return this;
  }

  public void unsetCurrentProgram() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTPROGRAM_ISSET_ID);
  }

  /** Returns true if field currentProgram is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentProgram() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRENTPROGRAM_ISSET_ID);
  }

  public void setCurrentProgramIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTPROGRAM_ISSET_ID, value);
  }

  public int getStartHour() {
    return this.startHour;
  }

  public BulkData setStartHour(int startHour) {
    this.startHour = startHour;
    setStartHourIsSet(true);
    return this;
  }

  public void unsetStartHour() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTHOUR_ISSET_ID);
  }

  /** Returns true if field startHour is set (has been assigned a value) and false otherwise */
  public boolean isSetStartHour() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTHOUR_ISSET_ID);
  }

  public void setStartHourIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTHOUR_ISSET_ID, value);
  }

  public int getStartMin() {
    return this.startMin;
  }

  public BulkData setStartMin(int startMin) {
    this.startMin = startMin;
    setStartMinIsSet(true);
    return this;
  }

  public void unsetStartMin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTMIN_ISSET_ID);
  }

  /** Returns true if field startMin is set (has been assigned a value) and false otherwise */
  public boolean isSetStartMin() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTMIN_ISSET_ID);
  }

  public void setStartMinIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTMIN_ISSET_ID, value);
  }

  /**
   * 
   * @see ProgramMode
   */
  public ProgramMode getProgramMode() {
    return this.programMode;
  }

  /**
   * 
   * @see ProgramMode
   */
  public BulkData setProgramMode(ProgramMode programMode) {
    this.programMode = programMode;
    return this;
  }

  public void unsetProgramMode() {
    this.programMode = null;
  }

  /** Returns true if field programMode is set (has been assigned a value) and false otherwise */
  public boolean isSetProgramMode() {
    return this.programMode != null;
  }

  public void setProgramModeIsSet(boolean value) {
    if (!value) {
      this.programMode = null;
    }
  }

  public int getProgramInterval() {
    return this.programInterval;
  }

  public BulkData setProgramInterval(int programInterval) {
    this.programInterval = programInterval;
    setProgramIntervalIsSet(true);
    return this;
  }

  public void unsetProgramInterval() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROGRAMINTERVAL_ISSET_ID);
  }

  /** Returns true if field programInterval is set (has been assigned a value) and false otherwise */
  public boolean isSetProgramInterval() {
    return EncodingUtils.testBit(__isset_bitfield, __PROGRAMINTERVAL_ISSET_ID);
  }

  public void setProgramIntervalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROGRAMINTERVAL_ISSET_ID, value);
  }

  public int getProgramDaysSize() {
    return (this.programDays == null) ? 0 : this.programDays.size();
  }

  public java.util.Iterator<Day> getProgramDaysIterator() {
    return (this.programDays == null) ? null : this.programDays.iterator();
  }

  public void addToProgramDays(Day elem) {
    if (this.programDays == null) {
      this.programDays = new ArrayList<Day>();
    }
    this.programDays.add(elem);
  }

  public List<Day> getProgramDays() {
    return this.programDays;
  }

  public BulkData setProgramDays(List<Day> programDays) {
    this.programDays = programDays;
    return this;
  }

  public void unsetProgramDays() {
    this.programDays = null;
  }

  /** Returns true if field programDays is set (has been assigned a value) and false otherwise */
  public boolean isSetProgramDays() {
    return this.programDays != null;
  }

  public void setProgramDaysIsSet(boolean value) {
    if (!value) {
      this.programDays = null;
    }
  }

  public int getProgramZonesSize() {
    return (this.programZones == null) ? 0 : this.programZones.size();
  }

  public java.util.Iterator<Zone> getProgramZonesIterator() {
    return (this.programZones == null) ? null : this.programZones.iterator();
  }

  public void addToProgramZones(Zone elem) {
    if (this.programZones == null) {
      this.programZones = new ArrayList<Zone>();
    }
    this.programZones.add(elem);
  }

  public List<Zone> getProgramZones() {
    return this.programZones;
  }

  public BulkData setProgramZones(List<Zone> programZones) {
    this.programZones = programZones;
    return this;
  }

  public void unsetProgramZones() {
    this.programZones = null;
  }

  /** Returns true if field programZones is set (has been assigned a value) and false otherwise */
  public boolean isSetProgramZones() {
    return this.programZones != null;
  }

  public void setProgramZonesIsSet(boolean value) {
    if (!value) {
      this.programZones = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RUN_STATE:
      if (value == null) {
        unsetRunState();
      } else {
        setRunState((RunState)value);
      }
      break;

    case START_TIME_OVERLAP:
      if (value == null) {
        unsetStartTimeOverlap();
      } else {
        setStartTimeOverlap((Boolean)value);
      }
      break;

    case CURRENT_PROGRAM:
      if (value == null) {
        unsetCurrentProgram();
      } else {
        setCurrentProgram((Integer)value);
      }
      break;

    case START_HOUR:
      if (value == null) {
        unsetStartHour();
      } else {
        setStartHour((Integer)value);
      }
      break;

    case START_MIN:
      if (value == null) {
        unsetStartMin();
      } else {
        setStartMin((Integer)value);
      }
      break;

    case PROGRAM_MODE:
      if (value == null) {
        unsetProgramMode();
      } else {
        setProgramMode((ProgramMode)value);
      }
      break;

    case PROGRAM_INTERVAL:
      if (value == null) {
        unsetProgramInterval();
      } else {
        setProgramInterval((Integer)value);
      }
      break;

    case PROGRAM_DAYS:
      if (value == null) {
        unsetProgramDays();
      } else {
        setProgramDays((List<Day>)value);
      }
      break;

    case PROGRAM_ZONES:
      if (value == null) {
        unsetProgramZones();
      } else {
        setProgramZones((List<Zone>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RUN_STATE:
      return getRunState();

    case START_TIME_OVERLAP:
      return isStartTimeOverlap();

    case CURRENT_PROGRAM:
      return getCurrentProgram();

    case START_HOUR:
      return getStartHour();

    case START_MIN:
      return getStartMin();

    case PROGRAM_MODE:
      return getProgramMode();

    case PROGRAM_INTERVAL:
      return getProgramInterval();

    case PROGRAM_DAYS:
      return getProgramDays();

    case PROGRAM_ZONES:
      return getProgramZones();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RUN_STATE:
      return isSetRunState();
    case START_TIME_OVERLAP:
      return isSetStartTimeOverlap();
    case CURRENT_PROGRAM:
      return isSetCurrentProgram();
    case START_HOUR:
      return isSetStartHour();
    case START_MIN:
      return isSetStartMin();
    case PROGRAM_MODE:
      return isSetProgramMode();
    case PROGRAM_INTERVAL:
      return isSetProgramInterval();
    case PROGRAM_DAYS:
      return isSetProgramDays();
    case PROGRAM_ZONES:
      return isSetProgramZones();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BulkData)
      return this.equals((BulkData)that);
    return false;
  }

  public boolean equals(BulkData that) {
    if (that == null)
      return false;

    boolean this_present_runState = true && this.isSetRunState();
    boolean that_present_runState = true && that.isSetRunState();
    if (this_present_runState || that_present_runState) {
      if (!(this_present_runState && that_present_runState))
        return false;
      if (!this.runState.equals(that.runState))
        return false;
    }

    boolean this_present_startTimeOverlap = true;
    boolean that_present_startTimeOverlap = true;
    if (this_present_startTimeOverlap || that_present_startTimeOverlap) {
      if (!(this_present_startTimeOverlap && that_present_startTimeOverlap))
        return false;
      if (this.startTimeOverlap != that.startTimeOverlap)
        return false;
    }

    boolean this_present_currentProgram = true;
    boolean that_present_currentProgram = true;
    if (this_present_currentProgram || that_present_currentProgram) {
      if (!(this_present_currentProgram && that_present_currentProgram))
        return false;
      if (this.currentProgram != that.currentProgram)
        return false;
    }

    boolean this_present_startHour = true;
    boolean that_present_startHour = true;
    if (this_present_startHour || that_present_startHour) {
      if (!(this_present_startHour && that_present_startHour))
        return false;
      if (this.startHour != that.startHour)
        return false;
    }

    boolean this_present_startMin = true;
    boolean that_present_startMin = true;
    if (this_present_startMin || that_present_startMin) {
      if (!(this_present_startMin && that_present_startMin))
        return false;
      if (this.startMin != that.startMin)
        return false;
    }

    boolean this_present_programMode = true && this.isSetProgramMode();
    boolean that_present_programMode = true && that.isSetProgramMode();
    if (this_present_programMode || that_present_programMode) {
      if (!(this_present_programMode && that_present_programMode))
        return false;
      if (!this.programMode.equals(that.programMode))
        return false;
    }

    boolean this_present_programInterval = true;
    boolean that_present_programInterval = true;
    if (this_present_programInterval || that_present_programInterval) {
      if (!(this_present_programInterval && that_present_programInterval))
        return false;
      if (this.programInterval != that.programInterval)
        return false;
    }

    boolean this_present_programDays = true && this.isSetProgramDays();
    boolean that_present_programDays = true && that.isSetProgramDays();
    if (this_present_programDays || that_present_programDays) {
      if (!(this_present_programDays && that_present_programDays))
        return false;
      if (!this.programDays.equals(that.programDays))
        return false;
    }

    boolean this_present_programZones = true && this.isSetProgramZones();
    boolean that_present_programZones = true && that.isSetProgramZones();
    if (this_present_programZones || that_present_programZones) {
      if (!(this_present_programZones && that_present_programZones))
        return false;
      if (!this.programZones.equals(that.programZones))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_runState = true && (isSetRunState());
    list.add(present_runState);
    if (present_runState)
      list.add(runState.getValue());

    boolean present_startTimeOverlap = true;
    list.add(present_startTimeOverlap);
    if (present_startTimeOverlap)
      list.add(startTimeOverlap);

    boolean present_currentProgram = true;
    list.add(present_currentProgram);
    if (present_currentProgram)
      list.add(currentProgram);

    boolean present_startHour = true;
    list.add(present_startHour);
    if (present_startHour)
      list.add(startHour);

    boolean present_startMin = true;
    list.add(present_startMin);
    if (present_startMin)
      list.add(startMin);

    boolean present_programMode = true && (isSetProgramMode());
    list.add(present_programMode);
    if (present_programMode)
      list.add(programMode.getValue());

    boolean present_programInterval = true;
    list.add(present_programInterval);
    if (present_programInterval)
      list.add(programInterval);

    boolean present_programDays = true && (isSetProgramDays());
    list.add(present_programDays);
    if (present_programDays)
      list.add(programDays);

    boolean present_programZones = true && (isSetProgramZones());
    list.add(present_programZones);
    if (present_programZones)
      list.add(programZones);

    return list.hashCode();
  }

  @Override
  public int compareTo(BulkData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRunState()).compareTo(other.isSetRunState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runState, other.runState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTimeOverlap()).compareTo(other.isSetStartTimeOverlap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTimeOverlap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTimeOverlap, other.startTimeOverlap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentProgram()).compareTo(other.isSetCurrentProgram());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentProgram()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentProgram, other.currentProgram);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartHour()).compareTo(other.isSetStartHour());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartHour()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startHour, other.startHour);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartMin()).compareTo(other.isSetStartMin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartMin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startMin, other.startMin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProgramMode()).compareTo(other.isSetProgramMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProgramMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.programMode, other.programMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProgramInterval()).compareTo(other.isSetProgramInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProgramInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.programInterval, other.programInterval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProgramDays()).compareTo(other.isSetProgramDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProgramDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.programDays, other.programDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProgramZones()).compareTo(other.isSetProgramZones());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProgramZones()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.programZones, other.programZones);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BulkData(");
    boolean first = true;

    sb.append("runState:");
    if (this.runState == null) {
      sb.append("null");
    } else {
      sb.append(this.runState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTimeOverlap:");
    sb.append(this.startTimeOverlap);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentProgram:");
    sb.append(this.currentProgram);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startHour:");
    sb.append(this.startHour);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startMin:");
    sb.append(this.startMin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("programMode:");
    if (this.programMode == null) {
      sb.append("null");
    } else {
      sb.append(this.programMode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("programInterval:");
    sb.append(this.programInterval);
    first = false;
    if (!first) sb.append(", ");
    sb.append("programDays:");
    if (this.programDays == null) {
      sb.append("null");
    } else {
      sb.append(this.programDays);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("programZones:");
    if (this.programZones == null) {
      sb.append("null");
    } else {
      sb.append(this.programZones);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BulkDataStandardSchemeFactory implements SchemeFactory {
    public BulkDataStandardScheme getScheme() {
      return new BulkDataStandardScheme();
    }
  }

  private static class BulkDataStandardScheme extends StandardScheme<BulkData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BulkData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RUN_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.runState = SprinklerServer.thrift.RunState.findByValue(iprot.readI32());
              struct.setRunStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // START_TIME_OVERLAP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.startTimeOverlap = iprot.readBool();
              struct.setStartTimeOverlapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CURRENT_PROGRAM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.currentProgram = iprot.readI32();
              struct.setCurrentProgramIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // START_HOUR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startHour = iprot.readI32();
              struct.setStartHourIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // START_MIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startMin = iprot.readI32();
              struct.setStartMinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROGRAM_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.programMode = SprinklerServer.thrift.ProgramMode.findByValue(iprot.readI32());
              struct.setProgramModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PROGRAM_INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.programInterval = iprot.readI32();
              struct.setProgramIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PROGRAM_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.programDays = new ArrayList<Day>(_list0.size);
                Day _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = SprinklerServer.thrift.Day.findByValue(iprot.readI32());
                  struct.programDays.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setProgramDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PROGRAM_ZONES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.programZones = new ArrayList<Zone>(_list3.size);
                Zone _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new Zone();
                  _elem4.read(iprot);
                  struct.programZones.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setProgramZonesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BulkData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.runState != null) {
        oprot.writeFieldBegin(RUN_STATE_FIELD_DESC);
        oprot.writeI32(struct.runState.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_TIME_OVERLAP_FIELD_DESC);
      oprot.writeBool(struct.startTimeOverlap);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURRENT_PROGRAM_FIELD_DESC);
      oprot.writeI32(struct.currentProgram);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_HOUR_FIELD_DESC);
      oprot.writeI32(struct.startHour);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_MIN_FIELD_DESC);
      oprot.writeI32(struct.startMin);
      oprot.writeFieldEnd();
      if (struct.programMode != null) {
        oprot.writeFieldBegin(PROGRAM_MODE_FIELD_DESC);
        oprot.writeI32(struct.programMode.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROGRAM_INTERVAL_FIELD_DESC);
      oprot.writeI32(struct.programInterval);
      oprot.writeFieldEnd();
      if (struct.programDays != null) {
        oprot.writeFieldBegin(PROGRAM_DAYS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.programDays.size()));
          for (Day _iter6 : struct.programDays)
          {
            oprot.writeI32(_iter6.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.programZones != null) {
        oprot.writeFieldBegin(PROGRAM_ZONES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.programZones.size()));
          for (Zone _iter7 : struct.programZones)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BulkDataTupleSchemeFactory implements SchemeFactory {
    public BulkDataTupleScheme getScheme() {
      return new BulkDataTupleScheme();
    }
  }

  private static class BulkDataTupleScheme extends TupleScheme<BulkData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BulkData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRunState()) {
        optionals.set(0);
      }
      if (struct.isSetStartTimeOverlap()) {
        optionals.set(1);
      }
      if (struct.isSetCurrentProgram()) {
        optionals.set(2);
      }
      if (struct.isSetStartHour()) {
        optionals.set(3);
      }
      if (struct.isSetStartMin()) {
        optionals.set(4);
      }
      if (struct.isSetProgramMode()) {
        optionals.set(5);
      }
      if (struct.isSetProgramInterval()) {
        optionals.set(6);
      }
      if (struct.isSetProgramDays()) {
        optionals.set(7);
      }
      if (struct.isSetProgramZones()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetRunState()) {
        oprot.writeI32(struct.runState.getValue());
      }
      if (struct.isSetStartTimeOverlap()) {
        oprot.writeBool(struct.startTimeOverlap);
      }
      if (struct.isSetCurrentProgram()) {
        oprot.writeI32(struct.currentProgram);
      }
      if (struct.isSetStartHour()) {
        oprot.writeI32(struct.startHour);
      }
      if (struct.isSetStartMin()) {
        oprot.writeI32(struct.startMin);
      }
      if (struct.isSetProgramMode()) {
        oprot.writeI32(struct.programMode.getValue());
      }
      if (struct.isSetProgramInterval()) {
        oprot.writeI32(struct.programInterval);
      }
      if (struct.isSetProgramDays()) {
        {
          oprot.writeI32(struct.programDays.size());
          for (Day _iter8 : struct.programDays)
          {
            oprot.writeI32(_iter8.getValue());
          }
        }
      }
      if (struct.isSetProgramZones()) {
        {
          oprot.writeI32(struct.programZones.size());
          for (Zone _iter9 : struct.programZones)
          {
            _iter9.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BulkData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.runState = SprinklerServer.thrift.RunState.findByValue(iprot.readI32());
        struct.setRunStateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.startTimeOverlap = iprot.readBool();
        struct.setStartTimeOverlapIsSet(true);
      }
      if (incoming.get(2)) {
        struct.currentProgram = iprot.readI32();
        struct.setCurrentProgramIsSet(true);
      }
      if (incoming.get(3)) {
        struct.startHour = iprot.readI32();
        struct.setStartHourIsSet(true);
      }
      if (incoming.get(4)) {
        struct.startMin = iprot.readI32();
        struct.setStartMinIsSet(true);
      }
      if (incoming.get(5)) {
        struct.programMode = SprinklerServer.thrift.ProgramMode.findByValue(iprot.readI32());
        struct.setProgramModeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.programInterval = iprot.readI32();
        struct.setProgramIntervalIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.programDays = new ArrayList<Day>(_list10.size);
          Day _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = SprinklerServer.thrift.Day.findByValue(iprot.readI32());
            struct.programDays.add(_elem11);
          }
        }
        struct.setProgramDaysIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.programZones = new ArrayList<Zone>(_list13.size);
          Zone _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new Zone();
            _elem14.read(iprot);
            struct.programZones.add(_elem14);
          }
        }
        struct.setProgramZonesIsSet(true);
      }
    }
  }

}

